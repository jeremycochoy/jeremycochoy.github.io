<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-01-03T18:34:38+02:00</updated><id>/feed.xml</id><title type="html">Jeremy Cochoy</title><subtitle>By a developper, for developpers.</subtitle><author><name>Jeremy Cochoy</name><email>jeremy.cochoy@gmail.com</email></author><entry xml:lang="en"><title type="html">List Zipper applied to iOS swift</title><link href="/list-zipper-swift/" rel="alternate" type="text/html" title="List Zipper applied to iOS swift" /><published>2019-05-24T00:00:00+03:00</published><updated>2019-05-24T00:00:00+03:00</updated><id>/list-zipper-swift</id><content type="html" xml:base="/list-zipper-swift/"><![CDATA[<p>Recently, I was implementing a model for a music application where the user
edit a collection of tracks, while editing only one track at a time.
After a little thought, the best representation of this “focus” in the data
model was obviously a zipper.
Since this is not a common pattern, I thought it would be a wonderful example
of how such a simple pattern can encode the intention into the data structure.</p>

<h2 id="abstract-idea">Abstract idea</h2>
<p>The Zipper is a well known pattern in Haskell,
and although this language is rarely used in production,
some of its usage translate very well to other languages.
The List Zipper is basically a list where the element we are focusing at
was taken out.
It allow shifting the attention to the previous or next element,
and obviously to retrieve the whole list if required.</p>

<h2 id="usage">Usage</h2>
<p>Using a zipper is pretty simple.
You build it from a list, move inside it, and insert/remove elements.
Here is a short usage:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">zippy</span> <span class="o">=</span> <span class="kt">ListZipper</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="p">[</span><span class="s">"I"</span><span class="p">,</span> <span class="s">"love"</span><span class="p">,</span> <span class="s">"pancakes"</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">zippy</span><span class="o">.</span><span class="n">cursor</span><span class="o">!</span><span class="p">)</span> <span class="c1">// I</span>
<span class="n">zippy</span><span class="o">.</span><span class="nf">right</span><span class="p">()</span> <span class="c1">// move to the right</span>
<span class="nf">print</span><span class="p">(</span><span class="n">zippy</span><span class="o">.</span><span class="n">cursor</span><span class="o">!</span><span class="p">)</span> <span class="c1">// love</span>
<span class="n">zippy</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="s">"hate"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">zippy</span><span class="o">.</span><span class="nf">toList</span><span class="p">()</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span> <span class="c1">// I hate pancakes</span>
<span class="n">zippy</span><span class="o">.</span><span class="nf">remove</span><span class="p">()</span>
<span class="n">zippy</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="s">"Eat"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">zippy</span><span class="o">.</span><span class="nf">toList</span><span class="p">()</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span> <span class="c1">// Eat pancakes</span>
</code></pre></div></div>

<h2 id="implementation">Implementation</h2>
<p>Let’s start by the data itself.
We need to store the element of the list we are looking at (the cursor).
Since we are focusing on an element of the list,
we also need to remember what was before this element, and what comes next.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ListZipper</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span> <span class="p">{</span>

  <span class="kd">private</span> <span class="k">var</span> <span class="nv">leftList</span><span class="p">:</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">rightList</span><span class="p">:</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

  <span class="c1">/// Cursor to the selected Track</span>
  <span class="k">var</span> <span class="nv">cursor</span><span class="p">:</span> <span class="kt">T</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>

<span class="p">}</span>
</code></pre></div></div>

<p>Now that we have the informations,
we need a way to convert from a list to a ListZipper,
and from a ListZipper to a list.
We add an initializer with as a default an empty list,
and a function that glue together the beginning of the list, the cursor,
and the remaining part of the list.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">init</span><span class="p">(</span><span class="n">from</span> <span class="nv">list</span><span class="p">:</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="o">=</span> <span class="p">[])</span> <span class="p">{</span>
    <span class="n">cursor</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="n">first</span>
    <span class="n">rightList</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="nf">reversed</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="c1">/// Convert to a swift array</span>
  <span class="kd">func</span> <span class="nf">toList</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">c</span> <span class="o">=</span> <span class="n">cursor</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">leftList</span> <span class="o">+</span> <span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">+</span> <span class="n">rightList</span><span class="o">.</span><span class="nf">reversed</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">leftList</span> <span class="o">+</span> <span class="n">rightList</span><span class="o">.</span><span class="nf">reversed</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Notice how we handle the case where the curser is pointing to nothing.
(A case which could occurs from an empty list / empty zipper.)</p>

<p>Our zipper can store the information,
but is always pointing to the first element of the list.
This is pretty boring and not really useful.
We introduce two functions that allow to move on the right or the left of
our band.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// Select the left element if available</span>
<span class="k">mutating</span> <span class="kd">func</span> <span class="nf">left</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">guard</span> <span class="n">leftList</span><span class="o">.</span><span class="n">isNotEmpty</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>

  <span class="k">if</span> <span class="k">let</span> <span class="nv">c</span> <span class="o">=</span> <span class="n">cursor</span> <span class="p">{</span><span class="n">rightList</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">c</span><span class="p">)}</span>
  <span class="n">cursor</span> <span class="o">=</span> <span class="n">leftList</span><span class="o">.</span><span class="nf">popLast</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">/// Select the right element if available</span>
<span class="k">mutating</span> <span class="kd">func</span> <span class="nf">right</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">guard</span> <span class="n">rightList</span><span class="o">.</span><span class="n">isNotEmpty</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>

  <span class="k">if</span> <span class="k">let</span> <span class="nv">c</span> <span class="o">=</span> <span class="n">cursor</span> <span class="p">{</span><span class="n">leftList</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">c</span><span class="p">)}</span>
  <span class="n">cursor</span> <span class="o">=</span> <span class="n">rightList</span><span class="o">.</span><span class="nf">popLast</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I personally choose to add guards for my particular usage,
because I always want to be pointing to a music track if my song is not empty.
But you could safely remove them.
In this setting you’d know you are on the bounds simply by checking if the
cursor is pointing to nothing.</p>

<p>One crucial step remaining to make this Zipper fully usable is a way to insert
and remove elements at the current location.
I choose to always insert on the right of the element pointed.
Symmetrically, when I remove the pointed element,
I automatically look to the left.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// Insert a new track</span>
<span class="k">mutating</span> <span class="kd">func</span> <span class="nf">insert</span><span class="p">(</span><span class="nv">element</span><span class="p">:</span> <span class="kt">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="k">let</span> <span class="nv">c</span> <span class="o">=</span> <span class="n">cursor</span> <span class="p">{</span><span class="n">leftList</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">c</span><span class="p">)}</span>

  <span class="n">cursor</span> <span class="o">=</span> <span class="n">element</span>
<span class="p">}</span>

<span class="c1">/// Remove the current pointed track</span>
<span class="k">mutating</span> <span class="kd">func</span> <span class="nf">remove</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">_</span> <span class="o">=</span> <span class="n">cursor</span> <span class="k">else</span> <span class="p">{</span><span class="k">return</span><span class="p">}</span>

  <span class="k">if</span> <span class="n">leftList</span><span class="o">.</span><span class="n">isNotEmpty</span> <span class="p">{</span>
    <span class="n">cursor</span> <span class="o">=</span> <span class="n">leftList</span><span class="o">.</span><span class="nf">popLast</span><span class="p">()</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">cursor</span> <span class="o">=</span> <span class="n">rightList</span><span class="o">.</span><span class="nf">popLast</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Notice that in the case you removed the guard in the left/right functions,
you can also simplify remove by only poping the value from <code class="language-plaintext highlighter-rouge">leftList</code>.</p>

<p>Now you have a simple but powerful zipper in your hands.
For more fanciness, one could also enjoy the natural functoriality of the list
zipper to add the <code class="language-plaintext highlighter-rouge">map</code> function and allow us to map functions inside it :)</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// Map a function to the tracks</span>
<span class="kd">func</span> <span class="n">map</span><span class="o">&lt;</span><span class="kt">R</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">f</span><span class="p">:</span> <span class="p">(</span><span class="kt">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">ListZipper</span><span class="o">&lt;</span><span class="kt">R</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">zipper</span> <span class="o">=</span> <span class="kt">ListZipper</span><span class="o">&lt;</span><span class="kt">R</span><span class="o">&gt;</span><span class="p">()</span>
  <span class="n">zipper</span><span class="o">.</span><span class="n">leftList</span> <span class="o">=</span> <span class="n">leftList</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="n">zipper</span><span class="o">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="n">zipper</span><span class="o">.</span><span class="n">rightList</span> <span class="o">=</span> <span class="n">rightList</span><span class="o">.</span><span class="nf">map</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">zipper</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I hope you liked this little taste of functional programming. 😉</p>]]></content><author><name>Jérémy Cochoy</name></author><category term="swift" /><category term="ios" /><category term="programming" /><category term="functional" /><category term="language" /><summary type="html"><![CDATA[A simple and elegant implementation of the list zipper data structure.]]></summary></entry><entry xml:lang="en"><title type="html">What is wrong with the object paradigm ?</title><link href="/what-is-wrong-with-the-object-paradigm/" rel="alternate" type="text/html" title="What is wrong with the object paradigm ?" /><published>2017-02-17T00:00:00+02:00</published><updated>2017-02-17T00:00:00+02:00</updated><id>/what-is-wrong-with-the-object-paradigm</id><content type="html" xml:base="/what-is-wrong-with-the-object-paradigm/"><![CDATA[<p>Disclaimer: Aside from the catchy title,
the main point of this article is to asks questions about the weakness of OOP
and how some languages provided some element of improvement, by taking a slightly different point of view.</p>

<blockquote>
  <p>The object paradigm is fundamentally wrong<sup id="fnref:wrong" role="doc-noteref"><a href="#fn:wrong" class="footnote" rel="footnote">1</a></sup></p>
</blockquote>

<p>If you are curious about programming languages and diverse paradigms,
you probably heard or read this sentence more than once.
Through those lines,
I’ll try to draw a picture of the main reason that can lead peoples to this conclusion.
What are the good side and wrong side of OOP,
and how we can improve this paradigm by tuning it a little bit.
This nice “tunning” is actually already part of some languages,
and I’ll refer to it as the ‘category paradigm’.</p>

<h2 id="where-does-the-object-paradigm-comes-from">Where does the object paradigm comes from?</h2>

<p>First, let’s recall how, historically, we came to the object paradigm.
We are in the late 70s.
The C language is now famous as it completely changed the way to write code
compared to assembly, is human readable and have a monstrous expressivity
in only few language words and
the procedural paradigm<sup id="fnref:procedural-paradigm" role="doc-noteref"><a href="#fn:procedural-paradigm" class="footnote" rel="footnote">2</a></sup> (the one you use while writing C)
is well understood.
But, as applications grow and get an increasing size,
developers are facing an increasingly common problem:
the code’s complexity is growing exponentially, and code gets harder and harder to write
(it still sounds like a today’s problem, right? :-) ).
The object paradigm was developed, expecting to solve the complexity curse.
Here came OBJC and C++, both in 1983.</p>

<p>Sadly, we know today that OOP wasn’t the Holly Graal.
But what did made peoples believe that it would be, and why is OOP still used today?</p>

<h2 id="the-hopes-of-oop">The hopes of OOP</h2>

<p>What came out from a lot of procedural development is that you often have types
that describe some complex structure (for example, linked lists in C are built of chained cells,
each cell composed of a value and a link to the next cell)
and functions operating on this type (using the same example,
function for initialising empty list, destroying list,
inserting into this list and removing value from it, etc.).
Once you have spotted this coding pattern, it sounds reasonable to formalise it so that
you don’t always have to rewrite it by hand, each time.
Indeed, this is the best way to involve : spot a pattern that people do mechanically,
and automatise it.
It worked in the automobile industry,
and it also did for computer development.
Automatization, from shell script… to new programming languages.</p>

<h2 id="genesis-of-oop">Genesis of OOP</h2>

<p>This was the genese of the object paradigm.
We call a such data type an object, add an
initialisation procedure always called at initialisation,
and an other one always called when the resource become unreachable.
Namely, OOP’s constructor and destructors.
Because we always have lots of methods related to this object that
always need as argument this object,
we add them to the type definition and call them methods.</p>

<p>Here is an example of the C object pattern :</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">object_type</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">value1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">value2</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">initialize_object</span><span class="p">(</span><span class="k">struct</span> <span class="n">object_type</span><span class="o">*</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">obj</span><span class="o">-&gt;</span><span class="n">value1</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="n">obj</span><span class="o">-&gt;</span><span class="n">value2</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="n">obj</span><span class="o">-&gt;</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">release_object</span><span class="p">(</span><span class="k">struct</span> <span class="n">object_type</span><span class="o">*</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">free</span><span class="p">(</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">do_stuff</span><span class="p">(</span><span class="k">struct</span> <span class="n">object_type</span><span class="o">*</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">int</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">obj</span><span class="o">-&gt;</span><span class="n">value1</span> <span class="o">+=</span> <span class="n">input</span><span class="p">;</span>
    <span class="n">obj</span><span class="o">-&gt;</span><span class="n">value2</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">obj</span><span class="o">-&gt;</span><span class="n">value1</span> <span class="o">+</span> <span class="n">obj</span><span class="o">-&gt;</span><span class="n">value2</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">//...</span>
<span class="k">struct</span> <span class="n">object_type</span> <span class="n">obj</span><span class="p">;</span>

<span class="p">{</span>
    <span class="n">initialize_object</span><span class="p">(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">);</span>
    <span class="n">do_stuff</span><span class="p">(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="n">release_object</span><span class="p">(</span><span class="o">&amp;</span><span class="n">obj</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>

<p>And the same thing now in C++:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Object</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="n">Object</span><span class="p">();</span>
    <span class="o">~</span><span class="n">Object</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">do_stuff</span><span class="p">(</span><span class="kt">int</span> <span class="n">input</span><span class="p">);</span>
<span class="nl">private:</span>
    <span class="kt">int</span> <span class="n">value1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">value2</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">Object</span><span class="o">::</span><span class="n">Object</span><span class="p">()</span>
    <span class="o">:</span><span class="n">value1</span><span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="n">value2</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ptr</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
<span class="p">};</span>

<span class="n">Object</span><span class="o">::~</span><span class="n">Object</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">free</span><span class="p">(</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">Object</span><span class="o">::</span><span class="n">do_stuff</span><span class="p">(</span><span class="kt">int</span> <span class="n">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">value1</span> <span class="o">+=</span> <span class="n">input</span><span class="p">;</span>
    <span class="n">value2</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">value1</span> <span class="o">+</span> <span class="n">value2</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">//...</span>
<span class="p">{</span>
    <span class="n">Object</span> <span class="n">obj</span><span class="p">;</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">do_stuff</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This example is quite simple, and show how object paradigm is applied
both in C and C++ languages.
The second language is a lot more error-proof thanks to
the support of the paradigm <em>in</em> the language.</p>

<p>Now you might interupt me and argue ‘object paradim isn’t just about methods glued to a type’.
And you would be right.
I swept under the rug <em>inheritence</em>.
This feature actually comes from spotting another codding patter C developers were also
doing quite frequently.
You reproduce the inheritence by agregating types, and using pointer arithmetic,
as shown below.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">A</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">u</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">B</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">A</span> <span class="n">parent</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">v</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">C</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">A</span> <span class="n">parent</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">w</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">B</span> <span class="n">obj_b</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">C</span> <span class="n">obj_c</span><span class="p">;</span>
<span class="c1">// Upcasting</span>
<span class="k">struct</span> <span class="n">A</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">obj_b</span><span class="p">.</span><span class="n">parent</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">A</span><span class="o">*</span> <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">obj_c</span><span class="p">.</span><span class="n">parent</span><span class="p">;</span>

</code></pre></div></div>

<p>The same code in C++ would be:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// In C++, the struct keyword is like the class keyword,</span>
<span class="c1">// but all elements are by default public.</span>

<span class="k">struct</span> <span class="nc">A</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">u</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="nc">B</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">v</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="nc">C</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">w</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">B</span> <span class="n">obj_b</span><span class="p">;</span>
<span class="n">C</span> <span class="n">obj_c</span><span class="p">;</span>
<span class="c1">// Upcasting</span>
<span class="n">A</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">obj_b</span><span class="p">;</span>
<span class="n">A</span><span class="o">*</span> <span class="n">q</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">obj_c</span><span class="p">;</span>

</code></pre></div></div>

<p>Introducing this feature in the language ensure automatic conversion from B* to A* with
the right pointer arithmetic.
It remove the risk of often hard to spot bugs.
Inheriting doesn’t apply only to type, it apply to methods.
You can call methods working with a type A on instance of type B.
This is the key reason of this pointer conversion.</p>

<p>The languages C++ and Java alow something even stronguer than reusing methode
for subtypes in inheritence hierarchy.
Through abstract methods, or Java’s interface,
you can force the existence of methods on a given type.
Such that the behavior can be different with different types,
but the interface to work on them remind the same.
Allowing huge code factorisation and genericity of algorithms.</p>

<h2 id="so-why-is-oop-wrong">So why is OOP wrong?</h2>

<p>Before saying anything,
I want to show you how does object looks like in different mainstream languages.</p>

<p><img src="data/object-languages.png" alt="Object Languages" /></p>

<p>Of course, you can make schemes similar to java in C++ ;
interface are obtained through abstract class.
It’s just that the language doesn’t prevent you from gluing too many things together
(but that’s actually part of the C++ philosophy : allow doing
as much thing as you can imagine, but you have to make carefully your design decisions).</p>

<p>Looking at the scheme, we see that always, in both languages,
type definition and method definitions are glued together.
You <strong>can not</strong> define a type and later,
in a completely independent way, implement methods for this type.
Actually, if C++ and Java are the only object languages you have heard about,
my last sentence might sounds really strange for you (even maybe sounds like nonsense).
But notice that in D, you <strong>can</strong> implement something rely similar to methods in a
complementary independent way of type definition.
Why would you do that? Let me give you a tasty example.</p>

<p>A guy (let call him A) make a colorful library describing tasty chocolate biscuits.
Here is a little bit of his library.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Biscuit -&gt; Cookie -&gt; FullChocolateCookie
                  -&gt; WhiteAndBlackCookie
        -&gt; Oreo
</code></pre></div></div>

<p>He think a lot about cooking such wonderful wonders, an implement many sophisticated methods.</p>

<p>Now another guy (named B) just discovered the best way to eat biscuits,
so that you can really enjoy all the taste and perfume they carry.
Not only for chocolate biscuits, but for any biscuit in the world.
He implements many new biscuit, and their <em>eat</em> method.
But in those languages, his only way to add an <em>eat</em> method to A’s cookies is to either:</p>

<ul>
  <li>Re-implement all the biscuit A did in his library, or modify A’s library to add his eat method,</li>
  <li>Encapsulate the A library in some container, like a ‘biscuit metal box’, which is definitively not as easy to eat (especially because metal tends to be harder your teeth).</li>
</ul>

<p>If you develop library and re-use existing libraries,
that’s a problem you probably already encountered many times.</p>

<p>This is because there is actually no good reason to enforce (Java style)
interface implementation where type definition occurs.
This is the first big issue coming from the way object model
is implemented <strong>and</strong> conceived in developer’s mind.</p>

<p>The second big issue, related to the way OOP is done today,
is the huge verbosity and boilerplate code introduced by encapsulation.
Good books like ‘effective C++’<sup id="fnref:effective-cpp" role="doc-noteref"><a href="#fn:effective-cpp" class="footnote" rel="footnote">3</a></sup> even recommend doing so.
You see it everyday, from getters and setters mostly doing one-line affectation
(many ide have tools for automating this code generation) to constructor
only forwarding argument to member variables.
I really like the following example from LLVM’s documentation:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">AST</span> <span class="n">Bidule</span> <span class="p">{</span>
    <span class="n">ASTBidule</span><span class="p">(</span><span class="n">t1</span> <span class="n">a</span><span class="p">,</span> <span class="n">t2</span> <span class="n">b</span><span class="p">,</span> <span class="n">t3</span> <span class="n">c</span><span class="p">)</span>
    <span class="o">:</span><span class="n">a</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">b</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">c</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{};</span>

    <span class="n">t1</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">t2</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">t3</span> <span class="n">c</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>So much redundancy.
Have a look at LLVM’s example for heavily verbose C++ code
(that is actually good C++ practice…).
Each variable’s name is written three times.
I would say that this code is three times longer that it should be
(I mean, if we was living in a perfect world).
But there isn’t a better way to do it, conforming to usual understanding of OOP.
If so, LLVM’s developer would have found it and spreed the word.</p>

<h2 id="the-categoric-paradigm">The categoric paradigm</h2>

<p>What I call categoric paradigm is a way of doing OOP in some functional languages
like Haskell, but also Rust.
Up to a certain amount it can also be done in D.</p>

<p>The main idea is that types remain types (aggregated data),
functions and procedure remain procedures.
Sets of procedures can be regrouped together in a typeclass definition.
A typeclass (it’s a mathematical class) definition is similar to a java interface.
Types that become instances of this typeclass should implement its methods, but
the main difference is that the belonging of a type T to a given typeclass C can be
stated independently of the typeclass definition and of the type definition.
In rust, typeclass are named trait.
Types are types (as they are in C) and the link between them, the instanciation of
the trait of a type can be done independently of the definition of the trait and of
the definition of the type.</p>

<p>Here is bellow a short example from rust’s documentation<sup id="fnref:trait" role="doc-noteref"><a href="#fn:trait" class="footnote" rel="footnote">4</a></sup>:</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// # A Sheep object:</span>

<span class="k">struct</span> <span class="n">Sheep</span> <span class="p">{</span> <span class="n">naked</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">'static</span> <span class="nb">str</span> <span class="p">}</span>

<span class="k">impl</span> <span class="n">Sheep</span> <span class="p">{</span>
    <span class="k">fn</span> <span class="nf">is_naked</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">bool</span> <span class="p">{</span>
        <span class="k">self</span><span class="py">.naked</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">shear</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">self</span><span class="nf">.is_naked</span><span class="p">()</span> <span class="p">{</span>
            <span class="c1">// Implementor methods can use the implementor's trait methods.</span>
            <span class="nd">println!</span><span class="p">(</span><span class="s">"{} is already naked..."</span><span class="p">,</span> <span class="k">self</span><span class="nf">.name</span><span class="p">());</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nd">println!</span><span class="p">(</span><span class="s">"{} gets a haircut!"</span><span class="p">,</span> <span class="k">self</span><span class="py">.name</span><span class="p">);</span>

            <span class="k">self</span><span class="py">.naked</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// # The Animal typeclass/trait/interface:</span>
<span class="k">trait</span> <span class="n">Animal</span> <span class="p">{</span>
    <span class="c1">// Static method signature; `Self` refers to the implementor type.</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">'static</span> <span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="k">Self</span><span class="p">;</span>

    <span class="c1">// Instance method signatures; these will return a string.</span>
    <span class="k">fn</span> <span class="nf">name</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="k">'static</span> <span class="nb">str</span><span class="p">;</span>
    <span class="k">fn</span> <span class="nf">noise</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="k">'static</span> <span class="nb">str</span><span class="p">;</span>

    <span class="c1">// Traits can provide default method definitions.</span>
    <span class="k">fn</span> <span class="nf">talk</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{} says {}"</span><span class="p">,</span> <span class="k">self</span><span class="nf">.name</span><span class="p">(),</span> <span class="k">self</span><span class="nf">.noise</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// # The implementation of the `Animal` trait for the type `Sheep`.</span>
<span class="k">impl</span> <span class="n">Animal</span> <span class="k">for</span> <span class="n">Sheep</span> <span class="p">{</span>
    <span class="c1">// `Self` is the implementor type: `Sheep`.</span>
    <span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">'static</span> <span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Sheep</span> <span class="p">{</span>
        <span class="n">Sheep</span> <span class="p">{</span> <span class="n">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="n">naked</span><span class="p">:</span> <span class="k">false</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">name</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="k">'static</span> <span class="nb">str</span> <span class="p">{</span>
        <span class="k">self</span><span class="py">.name</span>
    <span class="p">}</span>

    <span class="k">fn</span> <span class="nf">noise</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="o">&amp;</span><span class="k">'static</span> <span class="nb">str</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">self</span><span class="nf">.is_naked</span><span class="p">()</span> <span class="p">{</span>
            <span class="s">"baaaaah?"</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="s">"baaaaah!"</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// Default trait methods can be overridden.</span>
    <span class="k">fn</span> <span class="nf">talk</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// For example, we can add some quiet contemplation.</span>
        <span class="nd">println!</span><span class="p">(</span><span class="s">"{} pauses briefly... {}"</span><span class="p">,</span> <span class="k">self</span><span class="py">.name</span><span class="p">,</span> <span class="k">self</span><span class="nf">.noise</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>See how this three things can be done independently.</p>

<p>Similar things can be archived in haskell,
though constructor and destructor doesn’t exist.
But Haskell’s variable are by default immutable,
and the language is full of laziness.
In a such context, looking for a constructor or a destructor doesn’t make sens.
But for the curious, what is done in rust for methods can be done in the
same way in Haskell.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Though this article have a really catchy title,
the main point is to show you another perspective for the concept of object
that is quite different from the one OOP’s developer are used to.
The first goal is to show the weakness of the object paradigm,
and the second is to demonstrate how some of them can be strengthen
from a small switch in the viewpoint, using emerging languages for examples.
The view point demonstrated here is more known in the functional programming land
(although not all functional programming languages offers such features).
The Mozilla fondation made a wonderful work by creating rust, a language that provide
both the functional and procedural paradigms, and also allow taking the
object approach in cases where it fits better than the two previous paradigms.
I hope that it made you question yourself on the object oriented paradigm and
developed your curiosity for other languages.
The other languages mentioned are not mainstream, but the ideas they carry
appear increasingly in many languages and if we cannot say which language will be
the language of tomorrow, we can be sure that this language will provide many
tools that are common in the functional world, probably together with
our usual tools from procedural languages. So don’t turn your head away,
just because your favorite language doesn’t provide such features :)</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:wrong" role="doc-endnote">
      <p>Things aren’t black and white. The object paradigm is definitively well suited
for many tasks like modeling GUI. <a href="#fnref:wrong" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:procedural-paradigm" role="doc-endnote">
      <p>Procedural paradigm means essentially
that the language provide functions with side effects, and code is written linearly.
You can see it like an enhencement of languages that only provide goto and jumps. <a href="#fnref:procedural-paradigm" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:effective-cpp" role="doc-endnote">
      <p>This is a really good book on good programming advices
for C++ developer. Despite the critic made in this article, it’s definitively
a book full of good practices. <a href="#fnref:effective-cpp" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:trait" role="doc-endnote">
      <p>See <a href="http://rustbyexample.com/trait.html">rust traits</a> <a href="#fnref:trait" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Jérémy Cochoy</name></author><category term="think" /><category term="languages" /><category term="programming" /><category term="software" /><summary type="html"><![CDATA[A reflexion on error handling and application modeling through various variations of data modeling. We look at old C fashion, object languages, and more functional approaches.]]></summary></entry><entry xml:lang="en"><title type="html">How to use boost::property_tree to load and write JSON</title><link href="/boost-property-tree/" rel="alternate" type="text/html" title="How to use boost::property_tree to load and write JSON" /><published>2015-12-21T00:00:00+02:00</published><updated>2015-12-21T00:00:00+02:00</updated><id>/boost-property-tree</id><content type="html" xml:base="/boost-property-tree/"><![CDATA[<p><strong>Property Tree</strong> is a sublibrary of boost that allow you handling <em>tree of property</em>. It can be used to represent XML, JSON, INI files, file paths, etc. In our case, we will be interested in loading and writing JSON, to provide an interface with other applications.</p>

<p>Our example case will be the following json file :</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"height"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">320</span><span class="p">,</span><span class="w">
    </span><span class="nl">"some"</span><span class="w"> </span><span class="p">:</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"complex"</span><span class="w"> </span><span class="p">:</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"path"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"hello"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"animals"</span><span class="w"> </span><span class="p">:</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"rabbit"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"dog"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"brown"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"cat"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"grey"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"fruits"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span><span class="w"> </span><span class="s2">"raspberry"</span><span class="p">,</span><span class="w"> </span><span class="s2">"orange"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"matrix"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">],</span><span class="w"> </span><span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">],</span><span class="w"> </span><span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="mi">9</span><span class="p">]]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="reading-data">Reading data</h2>

<p>Let’s have a look at how we can load those data into our c++ application.</p>

<h3 id="setting-up">Setting up</h3>

<p>First, we need to include the libraries and load the file.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;boost/property_tree/ptree.hpp&gt;
#include &lt;boost/property_tree/json_parser.hpp&gt;
</span>
<span class="c1">// Short alias for this namespace</span>
<span class="k">namespace</span> <span class="n">pt</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">property_tree</span><span class="p">;</span>

<span class="c1">// Create a root</span>
<span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">root</span><span class="p">;</span>

<span class="c1">// Load the json file in this ptree</span>
<span class="n">pt</span><span class="o">::</span><span class="n">read_json</span><span class="p">(</span><span class="s">"filename.json"</span><span class="p">,</span> <span class="n">root</span><span class="p">);</span>
</code></pre></div></div>

<p>Now, we have a populated property tree thatis waiting from us to look at him. Notice that you can also read from a stream, for example <code class="language-plaintext highlighter-rouge">pt::read_json(std::cin, root)</code>{.cpp} is also allowed.</p>

<p>If your json file is illformed, you will be granted by a <code class="language-plaintext highlighter-rouge">pt::json_parser::json_parser_error</code>.</p>

<h3 id="loading-some-values">Loading some values</h3>

<p>We can access a value from the root by giving it’s path to the <code class="language-plaintext highlighter-rouge">get</code> method.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Read values</span>
<span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"height"</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="c1">// You can also go through nested nodes</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">root</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"some.complex.path"</span><span class="p">);</span>
</code></pre></div></div>

<p>If the field your are looking to doesn’t exists, the <code class="language-plaintext highlighter-rouge">get()</code> method will throw a <code class="language-plaintext highlighter-rouge">pt::ptree_bad_path</code> exception, so that you can recorver from incomplete json files. Notice you can set a default value as second argument, or use <code class="language-plaintext highlighter-rouge">get_optional&lt;T&gt;()</code> wich return a <code class="language-plaintext highlighter-rouge">boost::optional&lt;T&gt;</code>.</p>

<p>Notice the getter doesn’t care about the type of the input in the json file, but only rely on the ability to convert the string to the type you are asking.</p>

<h3 id="browsing-lists">Browsing lists</h3>

<p>So now, we would like to read a list of objects (in our cases, a list of animals).</p>

<p>We can handle it with a simple for loop, using an iterator. In <strong>c++11</strong>, it become :</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A vector to allow storing our animals</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">animals</span><span class="p">;</span>

<span class="c1">// Iterator over all animals</span>
<span class="k">for</span> <span class="p">(</span><span class="n">pt</span><span class="o">::</span><span class="n">ptree</span><span class="o">::</span><span class="n">value_type</span> <span class="o">&amp;</span><span class="n">animal</span> <span class="o">:</span> <span class="n">root</span><span class="p">.</span><span class="n">get_child</span><span class="p">(</span><span class="s">"animals"</span><span class="p">))</span>
<span class="p">{</span>
    <span class="c1">// Animal is a std::pair of a string and a child</span>

    <span class="c1">// Get the label of the node</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="n">animal</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
    <span class="c1">// Get the content of the node</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">color</span> <span class="o">=</span> <span class="n">animal</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">data</span><span class="p">();</span>
    <span class="n">animals</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">color</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Since <code class="language-plaintext highlighter-rouge">animal.second</code> is a <code class="language-plaintext highlighter-rouge">ptree</code>, we can also call call <code class="language-plaintext highlighter-rouge">get()</code> or <code class="language-plaintext highlighter-rouge">get_child()</code> in the case our node wasn’t just a string.</p>

<p>A bit more complexe example is given by a list of values. Each element of the list is actualy a <code class="language-plaintext highlighter-rouge">std::pair("", value)</code> (where value is a <code class="language-plaintext highlighter-rouge">ptree</code>). It doesnt means that reading it is harder.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">fruits</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">pt</span><span class="o">::</span><span class="n">ptree</span><span class="o">::</span><span class="n">value_type</span> <span class="o">&amp;</span><span class="n">fruit</span> <span class="o">:</span> <span class="n">root</span><span class="p">.</span><span class="n">get_child</span><span class="p">(</span><span class="s">"fruits"</span><span class="p">))</span>
<span class="p">{</span>
    <span class="c1">// fruit.first contain the string ""</span>
    <span class="n">fruits</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">fruit</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">data</span><span class="p">());</span>
<span class="p">}</span>

</code></pre></div></div>

<p>In the case the values arent string, we can just call <code class="language-plaintext highlighter-rouge">fruit.second.get_value&lt;T&gt;()</code> in place of <code class="language-plaintext highlighter-rouge">fruit.second.data()</code>.</p>

<h3 id="deeper--matrices">Deeper : matrices</h3>

<p>There is nothing now to enable reading of matrices, but it’s a good way to check that you anderstood the reading of list. But enought talking, let’s have a look at the code.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">pt</span><span class="o">::</span><span class="n">ptree</span><span class="o">::</span><span class="n">value_type</span> <span class="o">&amp;</span><span class="n">row</span> <span class="o">:</span> <span class="n">root</span><span class="p">.</span><span class="n">get_child</span><span class="p">(</span><span class="s">"matrix"</span><span class="p">))</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">pt</span><span class="o">::</span><span class="n">ptree</span><span class="o">::</span><span class="n">value_type</span> <span class="o">&amp;</span><span class="n">cell</span> <span class="o">:</span> <span class="n">row</span><span class="p">.</span><span class="n">second</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">matrix</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">cell</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">get_value</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
        <span class="n">y</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">x</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You can now read any kind of JSON tree. The next step is being able to read them.</p>

<h2 id="writing-json">Writing JSON</h2>

<p>Let’s say that now, we wan’t to produce this tree from our application’s data. To do that, all we have to do is build a <code class="language-plaintext highlighter-rouge">ptree</code> containing our data.</p>

<p>We start with an empty tree :</p>
<pre><code class="language-{.cpp}">pt::ptree root;

//...

// Once our ptree was constructed, we can generate JSON on standard output
pt::write_json(std::cout, root);
</code></pre>

<h3 id="add-values">Add values</h3>

<p>Puting values in a tree can be acomplished with the <code class="language-plaintext highlighter-rouge">put()</code> method.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">root</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">"height"</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
<span class="n">root</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">"some.complex.path"</span><span class="p">,</span> <span class="s">"bonjour"</span><span class="p">);</span>
</code></pre></div></div>

<p>As you can see, very boring.</p>

<h3 id="add-a-list-of-objects">Add a list of objects</h3>

<p>No big deel here, although we now use <code class="language-plaintext highlighter-rouge">add_child()</code> to put our <code class="language-plaintext highlighter-rouge">animal</code> node at the root.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a node</span>
<span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">animals_node</span><span class="p">;</span>
<span class="c1">// Add animals as childs</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">animal</span> <span class="o">:</span> <span class="n">animals</span><span class="p">)</span>
    <span class="n">animals_node</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">animal</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">animal</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
<span class="c1">// Add the new node to the root</span>
<span class="n">root</span><span class="p">.</span><span class="n">add_child</span><span class="p">(</span><span class="s">"animals"</span><span class="p">,</span> <span class="n">animals_node</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="add-many-nodes-with-the-same-name">Add many nodes with the same name</h3>

<p>Now start the tricky tricks. If you want to add more than one time a node
named <code class="language-plaintext highlighter-rouge">fish</code>, you can’t call the <code class="language-plaintext highlighter-rouge">put()</code> method. The call <code class="language-plaintext highlighter-rouge">node.put("name", value)</code> will
replace the existing node named <code class="language-plaintext highlighter-rouge">name</code>. But you can do it by manually pushing your nodes,
as demonstrated bellow.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// Add two objects with the same name</span>
 <span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">fish1</span><span class="p">;</span>
 <span class="n">fish1</span><span class="p">.</span><span class="n">put_value</span><span class="p">(</span><span class="s">"blue"</span><span class="p">);</span>
 <span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">fish2</span><span class="p">;</span>
 <span class="n">fish2</span><span class="p">.</span><span class="n">put_value</span><span class="p">(</span><span class="s">"yellow"</span><span class="p">);</span>
 <span class="n">oroot</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="s">"fish"</span><span class="p">,</span> <span class="n">fish1</span><span class="p">));</span>
 <span class="n">oroot</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="s">"fish"</span><span class="p">,</span> <span class="n">fish2</span><span class="p">));</span>
</code></pre></div></div>

<h3 id="add-a-list-of-values">Add a list of values</h3>

<p>If you remember, list are mades of nodes with empty name. Se we have to build node with empty names, and then use the <code class="language-plaintext highlighter-rouge">push_back()</code> once again to add all those unnamed childs.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add a list</span>
<span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">fruits_node</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">fruit</span> <span class="o">:</span> <span class="n">fruits</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Create an unnamed node containing the value</span>
    <span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">fruit_node</span><span class="p">;</span>
    <span class="n">fruit_node</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">fruit</span><span class="p">);</span>

    <span class="c1">// Add this node to the list.</span>
    <span class="n">fruits_node</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">fruit_node</span><span class="p">));</span>
<span class="p">}</span>
<span class="n">root</span><span class="p">.</span><span class="n">add_child</span><span class="p">(</span><span class="s">"fruits"</span><span class="p">,</span> <span class="n">fruits_node</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="add-a-matrix">Add a matrix</h3>

<p>We already have all the tools needed to export our matrix. But let’s demonstrate how to do it.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add a matrix</span>
<span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">matrix_node</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">row</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Create an unnamed value</span>
        <span class="n">pt</span><span class="o">::</span><span class="n">ptree</span> <span class="n">cell</span><span class="p">;</span>
        <span class="n">cell</span><span class="p">.</span><span class="n">put_value</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
        <span class="c1">// Add the value to our row</span>
        <span class="n">row</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">cell</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="c1">// Add the row to our matrix</span>
    <span class="n">matrix_node</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">row</span><span class="p">));</span>
<span class="p">}</span>
<span class="c1">// Add the node to the root</span>
<span class="n">root</span><span class="p">.</span><span class="n">add_child</span><span class="p">(</span><span class="s">"matrix"</span><span class="p">,</span> <span class="n">matrix_node</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="references">References</h2>

<p>You can download a <a href="./data/example.cpp">C++ example</a> and the <a href="./data/example.json">input JSON file</a> for experimenting. Compile it with <code class="language-plaintext highlighter-rouge">clang++ -std=c++11 example.cpp -o example</code>.</p>

<p>Some links related :</p>

<ul>
  <li><a href="http://www.boost.org/doc/libs/1_60_0/doc/html/property_tree/tutorial.html">The official documentation</a></li>
  <li><a href="http://stackoverflow.com/questions/2114466/creating-json-arrays-in-boost-using-property-trees">A post on stack overflow</a></li>
</ul>

<p><strong>Rem</strong> : At the time of writing, the boost::property_tree library doesn’t output typed value. But we can expect that it will be corrected soon.</p>]]></content><author><name>Jérémy Cochoy</name></author><category term="c++" /><category term="boost" /><category term="languages" /><category term="programming" /><category term="software" /><summary type="html"><![CDATA[A quick starting guide to the C++ boost library module property_tree.]]></summary></entry><entry xml:lang="en"><title type="html">An alternative error handling strategy for C++</title><link href="/an-alternative-error-handling-strategy-cpp/" rel="alternate" type="text/html" title="An alternative error handling strategy for C++" /><published>2013-08-27T00:00:00+03:00</published><updated>2013-08-27T00:00:00+03:00</updated><id>/an-alternative-error-handling-strategy-cpp</id><content type="html" xml:base="/an-alternative-error-handling-strategy-cpp/"><![CDATA[<h2 id="error-handling">Error handling</h2>

<p>This not so short post is dedicated to a subject that may interest many
programers: error handling.</p>

<p>Error handling is the “dark side” of programming. It is both the heart of
real world applications, and the dirty stuff you would like to avoid.</p>

<p>Since the C years, I know three most common ways of handling errors.</p>

<h2 id="do-it-c-style-return-code">Do it C-style: return code</h2>

<p>‘C-Style’ handling is the easiest way to do it, but it isn’t completely satisfying.</p>

<p>C-Style error handling is basicaly “returning an error code when the application
failed”. Here is short example.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">find_slash</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'/'</span><span class="p">)</span>
          <span class="n">i</span><span class="o">++</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'\0'</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">//Error code</span>

    <span class="c1">//True value</span>
    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// . . .</span>

<span class="k">if</span> <span class="p">(</span><span class="n">find_slash</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="p">{</span>
        <span class="c1">//error handling</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="whats-good-here">What’s good here?</h3>

<p>You can (and actualy, in C style, you do), right after the call, directly handle
the error by eventualy displaying a message and terminating the application,
or just retrieving the last state, aborting the computation…</p>

<p>When you wan’t to find where the error handling is made, you just have to look at
the <strong>function call</strong>. It’s <strong>right</strong> after.</p>

<h3 id="whats-bad-here">What’s bad here?</h3>

<p>As some may have told you, it mix error handling with proper “execution flow”.
When you read linearly the code as the code execute, you read sometime error
handling, and some time program logic. That’s really bad, because you would like to
read either “program logic” or “error handling”.</p>

<p>Also notice that you are limited to an “error code”. If you want to provide
more informations, you’ll have to create some functions (like errstr) and / or
use global variables;</p>

<h2 id="do-it-c-style-exceptions">Do it C++-style: exceptions</h2>

<p>When C was “enhanced” to c++, a new way of handling errors was introduced. It
was “exceptions”. Exceptions are a way of breaking the normal flow of your code
by “throwing” an error that will be “catched” somewhere else. Again, a short example.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">find_slash</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'/'</span><span class="p">)</span>
          <span class="n">i</span><span class="o">++</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'\0'</span><span class="p">)</span>
        <span class="k">throw</span> <span class="n">AnException</span><span class="p">(</span><span class="s">"Error message"</span><span class="p">);</span>

    <span class="c1">//True value</span>
    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// . . .</span>

<span class="k">try</span>
<span class="p">{</span>
    <span class="n">find_slash</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="n">AnException</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
   <span class="c1">//Handle exception</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="whats-good-here-1">What’s good here?</h3>

<p>Program logic and error handling are separated. On one side you can see how the function
whork and when it fail, on the other part you can see what it does if it failed.
It’s pretty, simplify reading of both error handling and program logic.</p>

<p>The second point is that now you can give as many information as you like, since
you can put what you want in your MyException object.</p>

<h2 id="whats-bad-here-1">What’s bad here?</h2>

<p>Writing exceptions well is verbose. You need an exception tree, if possible not too big, so that you can catch only the exception you are interesting it. Also, you need some
error codes inside, to know exactly what hapenned, retrieve an error message, etc.
Writing exceptions class <strong>is</strong> verbose, it’s the cost of the flexibility given by the
ability to handle more informations embeded as an error.</p>

<p>The way encouraged by this philosophy is to postpone error handling as late as possible,
so that users can have the highest flexibility to handle errors. Thats theoricaly a good
thing, but…</p>

<p>In big applications, you <strong>can’t</strong> find esily where the error is handled. When you wan’t
to know what would be the path of an error, you have to jump across files, functions,
and it’s really hard to find, if you introduce a new exception deep in the “call ~graph~ tree” (I mean the graph you would have if you draw each function call) then you have to
figure out where it should be handled, if it is already handled, in which places. It’s
really hard when the application is big, old, not really well writen everywhere. Actualy
it’s the case of most of the commercial projects. And that is that.</p>

<p>That’s what make me state “Exceptions are dangerous”. Of course, they provide a pretty
well to handle error… but only when you are working on small project, where the
“call graph” is simple and easy to get in the mind.</p>

<h2 id="the-error-box-pattern">The error box pattern</h2>

<p>I call it a pattern, so that people don’t be afraid. At the end, I’ll call it with it’s
right name, so please, be patient.</p>

<p>The main idea is creating a box that can contain either an error message or a value. We
will limit ourself to a string, and nothing more, because it’s actualy not so easy to
implement. We will try to keep the syntax readable, understandable, for use cases.
We won’t handle correctly copy constructor, more than one parameter functions,
and rvalues. We will keep it as simple as possible.</p>

<p>Let’s start with an example of use:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">E</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">find_slash</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'/'</span><span class="p">)</span>
          <span class="n">i</span><span class="o">++</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'\0'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">fail</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Error message"</span><span class="p">);</span>

    <span class="c1">//True value</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// . . .</span>

<span class="k">auto</span> <span class="n">v</span> <span class="o">=</span> <span class="n">find_slash</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//Handle exception</span>
<span class="p">}</span>
</code></pre></div></div>

<p>At the first look, it may look like it is the same thing as the C-style. But it isn’t.
To see that, you have to look at more than one function call.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">E</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">find_slash</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">);</span>
<span class="n">E</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">do_some_arithmetic</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
<span class="n">E</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">format</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
<span class="n">E</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span> <span class="n">display</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">);</span>

<span class="k">auto</span> <span class="n">v</span> <span class="o">=</span> <span class="n">ret</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
         <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="n">find_slash</span><span class="p">)</span>
         <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="n">do_some_arithmetic</span><span class="p">)</span>
         <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="n">format</span><span class="p">)</span>
         <span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>

<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">//Handle error</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Ok, so what happened ? Bind is a member function that takes your function, and tries
to apply it. If there is a value in the “error box”, then it aplies to function, and then
returns an error box (the compiler won’t let you give a function that doesn’t return
an error box).</p>

<p>So, we chained the call to find_slash, do_some_arithmetic, format and display. None
of them can take an error box, but thanks to bind, we “transformed” the functions <code class="language-plaintext highlighter-rouge">E&lt;something_out&gt; f(something_in)</code> to
functions of type <code class="language-plaintext highlighter-rouge">E&lt;something_out&gt; f(E&lt;something_in&gt;)</code>.</p>

<h3 id="whats-good-here-2">What’s good here?</h3>

<p>Once again, program logic (the chain) and error handling (the if) are separated. Like
with exception, we have the ability to read the chain and don’t think about where
the execution is interrupted. Actualy, the chain <strong>may</strong> be interrupted at <strong>any</strong> step.
But we can think as if no error is happening and check quickly if our logic is right.</p>

<p>Of course, typing will prevent you from binding format after a display, so we
don’t lose any typing capabilities.</p>

<p>Notice that we aren’t calling any of those function in any other. We are “composing”
them at the end. That is the key to make it works. You should, write small modular
functions (hey, look at that: you <strong>should</strong> write generic code so that it can work)
that accept a value, then compute an other “new” value, or fail. And at each
step, you don’t have to think about where an exception may interrupt your control
flow and take care of maintain you stuff in a valid state (exception safety is basically
beeing always looking at each call you do, and figure out if the function can interrupt
your flow and what will happen if it does). For this point, it’s “safer”.</p>

<p>As with exceptions, we can have “as many information as you like”, although in this
post we will write it “half template”, so that it’s a bit easier to understand.</p>

<p>We can easily locate <strong>where</strong> error handling happens. It’s always after a chaining
(unless the value is chained again). We have now a big execution flow, without
interruption, and small error handling flow, easy to locate. When a new error is added,
you just have to find the calls, following the chains, and you’ll get back directly to
the handling, and add what’s needed.
Big projects are more “linear” and easy to read.</p>

<h3 id="whats-bad-here-2">What’s bad here?</h3>

<p>First, it’s new. It’s not integrated to C++, it’s not the standard way, and with the
stl you’ll still have to use exceptions.</p>

<p>It’s still a bit too much verbose for my taste. The need to write explicitely the type in
<code class="language-plaintext highlighter-rouge">fail&lt;int&gt;("...")</code> is bad. If you had a polymorphic error type, then it’s worst because
you’ll have to write <code class="language-plaintext highlighter-rouge">fail&lt;return_type, error_type&gt;("...")</code>.</p>

<p>It do not provide an easy way to call a function that need more than one argument.
In some other languages, you have “applicative” types and currification that solve it
nicely, but that’s far from what you may expect from c++. I’m more likely to think that
a <code class="language-plaintext highlighter-rouge">bind2(E&lt;a&gt;, E&lt;b&gt;, f)</code> and <code class="language-plaintext highlighter-rouge">bind3(E&lt;a&gt;, E&lt;b&gt;, E&lt;c&gt;, f)</code> function could be used.
Variadic templates may help.</p>

<p>To get the value “out of the box”, we have to check if the box is really a value,
and then call a “to_value” method. And we have no means from doing it without
checking. What we would like to have is “deconstruction” of objects, but this doesn’t
exist in c++, and it’s not the kind of things you just have to say “hey, let’s
add it to the next standard”.</p>

<p>At the moment, I don’t know how you could adapt it to member functions. If you have
an idea, try it, and if it works, tell us :)</p>

<h2 id="implementing-a-monadic-error-handling">Implementing a monadic error handling</h2>

<p>I unleashed the demons, I wrote the name from dark magic. It’s <a href="/haskell-pure-3/">monad</a>. You can think of
monad as “box” containing a value in a “context”. For example, a box that contains
either a value or nothing is a monad (I let you write the implementation as an exercise).
This concept was heavily used and abused by the language <a href="https://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</a>,
so if you are curious you can have a look at my <a href="/haskell-pure-1/">french introduction crash course</a>.</p>

<p>A bit stranger, lists are monad. They are “a value” in a context, from a certain
point of view.</p>

<p>Let’s start by implementing the E class you saw above. I’m relying on C++11 <code class="language-plaintext highlighter-rouge">decltype</code>
and <code class="language-plaintext highlighter-rouge">auto -&gt; decltype</code> wich allow figuring out the type of things from expressions. It’s
really useful.</p>

<p>The bind function is a bit strange, but it does what I stated previously.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cm">/*
This is the "Either String" monad, as a way to handle errors.
*/</span>

<span class="k">template</span>
<span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">E</span>
<span class="p">{</span>
<span class="nl">private:</span>
    <span class="c1">//The value stored</span>
    <span class="n">T</span> <span class="n">m_value</span><span class="p">;</span>
    <span class="c1">//The error message stored</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_error</span><span class="p">;</span>
    <span class="c1">//A state. True it's a value, false it's the message.</span>
    <span class="kt">bool</span> <span class="n">m_valid</span><span class="p">;</span>

    <span class="n">E</span><span class="p">()</span>
    <span class="p">{}</span>

<span class="nl">public:</span>
    <span class="c1">//Encapsulate the value</span>
    <span class="k">static</span> <span class="n">E</span> <span class="n">ret</span><span class="p">(</span><span class="n">T</span> <span class="n">v</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">E</span> <span class="n">box</span><span class="p">;</span>
        <span class="n">box</span><span class="p">.</span><span class="n">m_value</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
        <span class="n">box</span><span class="p">.</span><span class="n">m_valid</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">box</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//Encapsulate an error</span>
    <span class="k">static</span> <span class="n">E</span> <span class="n">fail</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">E</span> <span class="n">box</span><span class="p">;</span>
        <span class="n">box</span><span class="p">.</span><span class="n">m_error</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
        <span class="n">box</span><span class="p">.</span><span class="n">m_valid</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">box</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//True if it's a valid value</span>
    <span class="k">operator</span> <span class="kt">bool</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">m_valid</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//Deconstruct an E to a value</span>
    <span class="n">T</span> <span class="n">to_value</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="c1">//It's a programmer error, it shouldn't happen.</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!*</span><span class="k">this</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"You can't deconstruct to a value from an error"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="n">std</span><span class="o">::</span><span class="n">terminate</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">m_value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//Deconstruct an E to an error</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_error</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="c1">//It's a programmer error, it shouldn't happen.</span>
        <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"You can't deconstruct to an error from a value"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="n">std</span><span class="o">::</span><span class="n">terminate</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">m_error</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">oss</span><span class="p">,</span> <span class="k">const</span> <span class="n">E</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">box</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">box</span><span class="p">)</span>
            <span class="n">oss</span> <span class="o">&lt;&lt;</span> <span class="n">box</span><span class="p">.</span><span class="n">m_value</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">oss</span> <span class="o">&lt;&lt;</span> <span class="n">box</span><span class="p">.</span><span class="n">m_error</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">oss</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">F</span><span class="p">&gt;</span>
    <span class="kr">inline</span>
    <span class="k">auto</span> <span class="n">bind</span><span class="p">(</span><span class="n">F</span> <span class="n">f</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">decltype</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="n">m_value</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="n">type</span> <span class="o">=</span> <span class="k">decltype</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="n">m_value</span><span class="p">));</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">m_value</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="n">type</span><span class="o">::</span><span class="n">fail</span><span class="p">(</span><span class="n">m_error</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

</code></pre></div></div>

<p>I also overloaded the <code class="language-plaintext highlighter-rouge">&lt;&lt;</code> operator, so that it’s easier to see what the box contains.
We don’t really need it, and it may be a good idea to remove it for a “true” usage.</p>

<p>If you look at this, and the example, we need a “E<void>" type, but it won't work as if.
We need a special instance for void. It's exactly the same thing, except that a
value is now an "empty box".</void></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
    Special instance for void
*/</span>

<span class="k">template</span><span class="o">&lt;</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">E</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span>
<span class="p">{</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_error</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">m_valid</span><span class="p">;</span>

    <span class="n">E</span><span class="p">()</span>
    <span class="p">{}</span>

<span class="nl">public:</span>
    <span class="c1">//Encapsulate the value</span>
    <span class="k">static</span> <span class="n">E</span> <span class="n">ret</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">E</span> <span class="n">box</span><span class="p">;</span>
        <span class="n">box</span><span class="p">.</span><span class="n">m_valid</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">box</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//Encapsulate an error</span>
    <span class="k">static</span> <span class="n">E</span> <span class="n">fail</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">E</span> <span class="n">box</span><span class="p">;</span>
        <span class="n">box</span><span class="p">.</span><span class="n">m_error</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
        <span class="n">box</span><span class="p">.</span><span class="n">m_valid</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">box</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//True if it's a valid value</span>
    <span class="k">operator</span> <span class="kt">bool</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">m_valid</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">//Déconstruct an E to a value</span>
    <span class="kt">void</span> <span class="n">to_value</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="c1">//It's a programmer error, it shouldn't happen.</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!*</span><span class="k">this</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"You can't deconstruct to a value from an error"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="n">std</span><span class="o">::</span><span class="n">terminate</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">//Deconstruct an E to an error</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">to_error</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="c1">//It's a programmer error, it shouldn't happen.</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"You can't deconstruct to an error from a value"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="n">std</span><span class="o">::</span><span class="n">terminate</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">m_error</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">oss</span><span class="p">,</span> <span class="k">const</span> <span class="n">E</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;&amp;</span> <span class="n">box</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">box</span><span class="p">)</span>
            <span class="n">oss</span> <span class="o">&lt;&lt;</span> <span class="s">"()"</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">oss</span> <span class="o">&lt;&lt;</span> <span class="n">box</span><span class="p">.</span><span class="n">m_error</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">oss</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">F</span><span class="p">&gt;</span>
    <span class="kr">inline</span>
    <span class="k">auto</span> <span class="n">bind</span><span class="p">(</span><span class="n">F</span> <span class="n">f</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">decltype</span><span class="p">(</span><span class="n">f</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="n">type</span> <span class="o">=</span> <span class="k">decltype</span><span class="p">(</span><span class="n">f</span><span class="p">());</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">();</span>
        <span class="k">else</span>
        <span class="k">return</span> <span class="n">type</span><span class="o">::</span><span class="n">fail</span><span class="p">(</span><span class="n">m_error</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Oh, we don’t spoke about <code class="language-plaintext highlighter-rouge">ret</code> and <code class="language-plaintext highlighter-rouge">fail</code>. Actually, they are just wraper around
the <code class="language-plaintext highlighter-rouge">xxx::fail</code> and <code class="language-plaintext highlighter-rouge">xxx::ret</code> functions.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
   Then, I introduced those simple functions, to reduce the
   call to something readable/writable
 */</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="kr">inline</span>
<span class="n">E</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ret</span><span class="p">(</span><span class="n">T</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">E</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">ret</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="kr">inline</span>
<span class="n">E</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">fail</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">err</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">E</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">fail</span><span class="p">(</span><span class="n">err</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There, we are, you can compile and play with the example above.</p>

<p>If you want more stuff to play with, I also have this “more realistic” example:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
    Here comes a use case.
*/</span>

<span class="c1">// What a user would see:</span>

<span class="c1">//Return a value in an error context</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span> <span class="kr">inline</span>
<span class="n">E</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ret</span><span class="p">(</span><span class="n">T</span> <span class="n">v</span><span class="p">);</span>
<span class="c1">//Fail in an error context of type T</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span> <span class="kr">inline</span>
<span class="n">E</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">fail</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">err</span><span class="p">);</span>

<span class="c1">// What a user would write:</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">vs</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">;</span>

<span class="c1">//Parse a +- formated string.</span>
<span class="c1">//If a letter is prefixed by +, then the function toupper is applied.</span>
<span class="c1">//''                                              tolower is applied.</span>
<span class="c1">//Non alphabetical (+ and - excepted) aren't alowed.</span>
<span class="c1">//Words are cut on each space ' '. Other blank characters aren't alowed.</span>
<span class="n">E</span><span class="o">&lt;</span><span class="n">vs</span><span class="o">&gt;</span> <span class="n">parse</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">vs</span> <span class="n">vec</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">fail</span><span class="o">&lt;</span><span class="n">vs</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Empty string aren't allowed"</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">stack</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span>
        <span class="k">case</span> <span class="sc">'-'</span><span class="p">:</span>
            <span class="n">mode</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">'+'</span><span class="p">:</span>
            <span class="n">mode</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">' '</span><span class="p">:</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
                <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">stack</span><span class="p">);</span>
            <span class="n">stack</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
            <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nl">default:</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isalpha</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
                <span class="k">return</span> <span class="n">fail</span><span class="o">&lt;</span><span class="n">vs</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Only alpha characters are allowed"</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tolower</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">toupper</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
            <span class="k">else</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="n">mode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">stack</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">(</span><span class="n">vec</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//Take the first word and append it to the begining of all other words.</span>
<span class="c1">//Vec should contain at least one element.</span>
<span class="n">E</span><span class="o">&lt;</span><span class="n">vs</span><span class="o">&gt;</span> <span class="n">prefixy</span><span class="p">(</span><span class="n">vs</span> <span class="n">vec</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">fail</span><span class="o">&lt;</span><span class="n">vs</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Can't add prefixes on an empty table"</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">prefix</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
    <span class="n">vs</span> <span class="n">out</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">s</span> <span class="o">:</span> <span class="n">vec</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">prefix</span> <span class="o">==</span> <span class="n">s</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="n">out</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="n">s</span> <span class="o">+</span> <span class="s">"^"</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">//Concatenate all strings as a big string. Vec should contain data.</span>
<span class="n">E</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">concat</span><span class="p">(</span><span class="n">vs</span> <span class="n">vec</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">output</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">fail</span><span class="o">&lt;</span><span class="n">str</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Empty vectors aren't allowed"</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">s</span> <span class="o">:</span> <span class="n">vec</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">+=</span> <span class="n">s</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">fail</span><span class="o">&lt;</span><span class="n">str</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"No data found"</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">(</span><span class="n">output</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">;</span>

    <span class="c1">//Parse some string, show how error interrupt computation of the "chain".</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span><span class="p">((</span><span class="n">s</span><span class="p">)</span><span class="s">"+hello    -WORLD"</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">parse</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">prefixy</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">concat</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span><span class="p">((</span><span class="n">s</span><span class="p">)</span><span class="s">"+hello Hello  Hello"</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">parse</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">prefixy</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">concat</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span><span class="p">((</span><span class="n">s</span><span class="p">)</span><span class="s">"+   "</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">parse</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">prefixy</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">concat</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span><span class="p">((</span><span class="n">s</span><span class="p">)</span><span class="s">"+hi"</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">parse</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">prefixy</span><span class="p">).</span><span class="n">bind</span><span class="p">(</span><span class="n">concat</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="c1">//Play with lambda to "replace" a value if it's not an error.</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span><span class="p">((</span><span class="n">s</span><span class="p">)</span><span class="s">"Some string"</span><span class="p">).</span><span class="n">bind</span><span class="p">([](</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">fail</span><span class="o">&lt;</span><span class="n">s</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"Failed"</span><span class="p">);});</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span><span class="p">(</span><span class="mi">23</span><span class="p">).</span><span class="n">bind</span><span class="p">([](</span><span class="k">const</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">ret</span><span class="p">(</span><span class="mi">42</span><span class="p">);});</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">fail</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"NaN"</span><span class="p">).</span><span class="n">bind</span><span class="p">([](</span><span class="k">const</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">ret</span><span class="p">(</span><span class="mi">42</span><span class="p">);});</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Jérémy Cochoy</name></author><category term="programming" /><category term="C++" /><category term="monads" /><category term="language" /><category term="software" /><category term="script" /><summary type="html"><![CDATA[We treat three historical ways to handle errors, and consider a functional approach using monades to handle error in C++. We provide a C++ implementation unsing templates and discuss the pros and cons.]]></summary></entry><entry xml:lang="fr"><title type="html">Tutoriel d’initiation à SEDNL</title><link href="/tutorial-sednl/" rel="alternate" type="text/html" title="Tutoriel d’initiation à SEDNL" /><published>2013-08-25T00:00:00+03:00</published><updated>2013-08-25T00:00:00+03:00</updated><id>/tutorial-sednl</id><content type="html" xml:base="/tutorial-sednl/"><![CDATA[<p>Ce court tutoriel vas vous apprendre à utiliser la bibliothèque réseau SedNL.
Grâce à cette bibliothèque facile et rapide à prendre en main, nous réaliseront
un client et serveur de chat, ainsi qu’une application de dessin collaborative.</p>

<h2 id="installation-de-sednl">Installation de SedNL</h2>

<h3 id="récupération-des-sources">Récupération des sources</h3>

<p>Vous pouvez obtenir les sources de la bibliothèque sur Git Hub.</p>

<p>On supposera l’utilisation de git sous linux, ou bien de msysgit sous windows.</p>

<p>Votre client git en main, et une fois dans le répertoire de travail qui
vous convient, récupérez les sources avec les commandes :</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone http://github.com/Zenol/sednl.git
<span class="nb">cd </span>sednl
</code></pre></div></div>

<p>Ensuite, utilisez cmake pour générer les makefile de votre projet.</p>

<p>Commençons par créer un répertoire pour la compilation.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>build
<span class="nb">cd </span>build
</code></pre></div></div>

<p>Pour le moment, VC++ ne supporte pas encore le C++11, et il n’est
malheureusement pas possible de compiler SedNL avec le compilateur de
Microsoft. La procédure pour utiliser MinGW est légèrement plus compliquée.</p>

<p>Sous linux :</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake ..
</code></pre></div></div>

<p>Sous Windows pour utiliser MinGW :</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake <span class="nt">-G</span> <span class="s2">"MinGW Makefiles"</span> ..
</code></pre></div></div>

<p>Vous pouvez éventuellement personnaliser le build en exécutant <code class="language-plaintext highlighter-rouge">cmake-gui</code> sous
linux ou <code class="language-plaintext highlighter-rouge">cmake-gui.exe</code> sous Windows.</p>

<p>Vous pouvez maintenant lancer la compilation avec <code class="language-plaintext highlighter-rouge">make</code> sous linux,
et <code class="language-plaintext highlighter-rouge">mingw32-make</code> sous Windows avec mingw.</p>

<p>Une fois la compilation terminé, vous obtenez une bibliothèque statique
<code class="language-plaintext highlighter-rouge">sednl-1.0.a</code> et une dynamique <code class="language-plaintext highlighter-rouge">sednl-1.0.so</code>. (.lib et .dll sous windows).</p>

<p>C’est terminé, nous allons pouvoir compiler notre premier programme.</p>

<h2 id="service-de-log-dextraits-de-code">Service de log d’extraits de code</h2>

<p>Pour nos premiers pas avec cette bibliothèque, nous allons réaliser une
application cliente capable d’envoyer un extrait de code lue depuis l’entrée
standard vers un serveur qui loggera tout les extraits reçus, sur sa sortie
standard.</p>

<h3 id="le-client">Le client</h3>

<p>Commençons par le client. Il doit recevoir un extrait de code sur son entrée
standard, puis l’envoyer au serveur.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;SEDNL/sednl.hpp&gt;
#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">SedNL</span><span class="p">;</span>

<span class="c1">// Read input from stdin</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="nf">get_input</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">line</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">output</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">,</span> <span class="n">line</span><span class="p">))</span>
        <span class="n">output</span> <span class="o">+=</span> <span class="n">line</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">output</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" listing_name"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">try</span>
    <span class="p">{</span>
        <span class="c1">//Connect to server port 4280</span>
        <span class="n">TCPClient</span> <span class="n">client</span><span class="p">(</span><span class="n">SocketAddress</span><span class="p">(</span><span class="mi">4280</span><span class="p">,</span> <span class="s">"localhost"</span><span class="p">));</span>

        <span class="c1">//Read the input</span>
        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">input</span> <span class="o">=</span> <span class="n">get_input</span><span class="p">();</span>

        <span class="c1">//Send the code to log</span>
        <span class="n">client</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">make_event</span><span class="p">(</span><span class="s">"log_that"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">input</span><span class="p">));</span>

        <span class="n">client</span><span class="p">.</span><span class="n">disconnect</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">catch</span><span class="p">(...)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Failed to connect"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Si le fichier se nome « client.cpp », vous pouvez le compiler avec la ligne
<code class="language-plaintext highlighter-rouge">clang++ -std=c++11 -I/usr/local/include/sednl-1.0/ -lsednl-1.0 -lpthread client.cpp</code>.</p>

<p>La première fonction <code class="language-plaintext highlighter-rouge">get_input</code> lit l’entrée standard et stocke tout l’extrait de code dans une chaîne qu’elle renvoie.</p>

<p>Par la suite, on demande à ce que le premier argument du programme soit le nom
de l’extrait de code (<code class="language-plaintext highlighter-rouge">argv[0]</code>).</p>

<p>Enfin, c’est à la ligne 26 que commence vraiment notre programme.
On commence par ouvrir une connexion vers <code class="language-plaintext highlighter-rouge">localhost</code>. C’est l’ordinateur
qui exécute ce programme. On peux aussi indiquer « 127.0.0.1 ».
Le port sur le quel on cherche à atteindre le serveur est le port « 4280 ».
Un port n’a pas de réalitée matériel, c’est juste une façon de distinguer
les différentes connexions ouverte vers un ordinateur.
Le choix du numéro de port est arbitraire, même si l’on cherchera à
éviter d’utiliser les plus communs (comme 80 pour http,
20 et 21 pour ftp, etc.) ainsi que les valeurs inférieurs à 1024, car
certains système requière des privilèges administrateur pour les utiliser.</p>

<p>La ligne 35 fait deux choses. D’abord, <code class="language-plaintext highlighter-rouge">make_event</code> fabriquer un objet
de type <code class="language-plaintext highlighter-rouge">Event</code> qui contient :</p>

<p>1)  Le nom de l’évènement envoyé au serveur. Ici, <code class="language-plaintext highlighter-rouge">"log_that"</code>.
2)  Le nom sous le quel l’extrait de code sera enregistré. Ici, <code class="language-plaintext highlighter-rouge">argv[1]</code>.
3)  L’extrait de code à logger. Ici, <code class="language-plaintext highlighter-rouge">input</code>.</p>

<p>Une fois l’évènement crée, il est envoyé avec par la fonction membre <code class="language-plaintext highlighter-rouge">send</code>.</p>

<p>Enfin, la connexion est fermée à la ligne 37.</p>

<p>Si le serveur est indisponible, la connexion échoue, et une exception est
levée. Elle est alors attrapée à la ligne 39.</p>

<h3 id="le-serveur">Le serveur</h3>

<p>Le serveur n’est pas beaucoup plus compliqué. Il doit attendre de nouvelle
connections, et écrire sur la sortie standard le texte reçu. Attention,
il faudra bien penser à gérer le cas où deux clients envoie un message
au même moment. Pour ça, on utilisera une mutex.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;SEDNL/sednl.hpp&gt;
#include &lt;iostream&gt;
#include &lt;mutex&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">SedNL</span><span class="p">;</span>

<span class="c1">//Locked when writing to stdout</span>
<span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">log_mutex</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">on_log_that</span><span class="p">(</span><span class="n">Connection</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Event</span><span class="o">&amp;</span> <span class="n">event</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">log_name</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">log_content</span><span class="p">;</span>

    <span class="n">PacketReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">get_packet</span><span class="p">();</span>
    <span class="n">reader</span> <span class="o">&gt;&gt;</span> <span class="n">log_name</span> <span class="o">&gt;&gt;</span> <span class="n">log_content</span><span class="p">;</span>

    <span class="n">log_mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"--------------------"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">": "</span> <span class="o">&lt;&lt;</span> <span class="n">log_name</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"--------------------"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">log_content</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">log_mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">TCPServer</span> <span class="n">server</span><span class="p">(</span><span class="n">SocketAddress</span><span class="p">(</span><span class="mi">4280</span><span class="p">));</span>

        <span class="n">EventListener</span> <span class="n">listener</span><span class="p">(</span><span class="n">server</span><span class="p">);</span>

        <span class="n">EventConsumer</span> <span class="n">consumer</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
        <span class="n">consumer</span><span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="s">"log_that"</span><span class="p">).</span><span class="n">set_function</span><span class="p">(</span><span class="n">on_log_that</span><span class="p">);</span>

        <span class="n">listener</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
        <span class="n">consumer</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>

        <span class="c1">// Sleep</span>
        <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
            <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="mi">1000</span><span class="p">));</span>
        <span class="n">listener</span><span class="p">.</span><span class="n">join</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">catch</span><span class="p">(...)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Failed to connect"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Jérémy Cochoy</name></author><category term="sednl" /><category term="network" /><category term="programming" /><category term="c++" /><category term="software" /><summary type="html"><![CDATA[Initiation à la bibliothèque réseau SEDNL.]]></summary></entry><entry xml:lang="fr"><title type="html">SedNL : Simple Event Driven Network Library</title><link href="/sednl-simple-event-driven-network-library/" rel="alternate" type="text/html" title="SedNL : Simple Event Driven Network Library" /><published>2013-08-21T00:00:00+03:00</published><updated>2013-08-21T00:00:00+03:00</updated><id>/sednl-simple-event-driven-network-library</id><content type="html" xml:base="/sednl-simple-event-driven-network-library/"><![CDATA[<p><a href="https://github.com/Zenol/sednl" title="SedNL repository">SedNL</a> est une bibliothèque
réseau écrite en C++11, principalement destinée à la réalisation d’applications
réseau dont le protocole est basé sur la notion d’évènements :
Les clients et le serveur communiquent via des évènements,
de la forme : <code class="language-plaintext highlighter-rouge">"login" { username : "raccoon", password : "leaf" }</code>.</p>

<p>SedNL est sous <a href="https://github.com/Zenol/sednl/blob/master/LICENCE">licence ZLib</a>,
ce qui autorise une utilisation commerciale / closed source, sans obligation
de redistribution de la licence avec les binaires. Elle autorise aussi la modification
de la bibliothèque pour l’intégrer à vos projets, sans obligation de publier vos
modifications. Il n’y a pas non plus de comportement viral comme celui
de la GPL : la licence est donc compatible avec la plupart
des autres licences.</p>

<p>De nombreux jeux utilisent un système d’évènements pour leur mode réseau.
Par exemple, voici <a href="https://developer.valvesoftware.com/wiki/Networking_Events_%26_Messages">la documentation d’un SDK de Valve</a>
qui fournit un mécanisme d’évènements.</p>

<p>L’API de SedNL a été conçue pour être <strong>simple</strong>, <strong>concise</strong>, et rapide à
apprendre (moins d’un quart d’heure pour un développeur expérimenté).
Elle convient parfaitement tant à des projets d’envergure moyenne que des
projets de taille plus conséquente.</p>

<p>Un court exemple d’utilisation du mécanisme d’évènement coté serveur :</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;SEDNL/sednl.hpp&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">SedNL</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">on_disconnect</span><span class="p">(</span><span class="n">Connection</span><span class="o">&amp;</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">on_connect</span><span class="p">(</span><span class="n">Connection</span><span class="o">&amp;</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">on_event</span><span class="p">(</span><span class="n">Connection</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">Event</span><span class="o">&amp;</span><span class="p">);</span>

<span class="n">TCPServer</span> <span class="nf">server</span><span class="p">(</span><span class="n">SocketAddress</span><span class="p">(</span><span class="mi">4242</span><span class="p">));</span>
<span class="n">EventListener</span> <span class="nf">listener</span><span class="p">(</span><span class="n">server</span><span class="p">);</span>
<span class="n">listener</span><span class="p">.</span><span class="n">on_connect</span><span class="p">().</span><span class="n">set_function</span><span class="p">(</span><span class="n">on_connect</span><span class="p">);</span>

<span class="n">EventConsumer</span> <span class="nf">consumer</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
<span class="n">consumer</span><span class="p">.</span><span class="n">on_disconnect</span><span class="p">().</span><span class="n">set_function</span><span class="p">(</span><span class="n">on_disconnect</span><span class="p">);</span>
<span class="n">consumer</span><span class="p">.</span><span class="n">bind</span><span class="p">(</span><span class="s">"login"</span><span class="p">).</span><span class="n">set_function</span><span class="p">(</span><span class="n">on_login</span><span class="p">);</span>

<span class="n">listener</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
<span class="n">consumer</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</code></pre></div></div>

<p>Déterminer la bibliothèque la plus adaptée à votre projet est
une étape critique : un mauvais choix se répercutera plusieurs mois
plus tard par un coût important, nécessitant souvent le
ré-usinage(refactoring) d’une quantité importante de code, et donc
une énorme perte de temps (sans compter que c’est l’occasion rêvée
pour de nombreux bugs qui voudraient élire domicile dans votre code).
C’est pourquoi la documentation vous met tout de suite en face de
l’architecture type assumée par SedNL : Une communication via des
évènements, procédés de manière asynchrone, avec la garantie que
l’évènement <i>connected</i> sera le premier exécuté à la connexion
d’un client. À partir de cet instant, aucun ordre dans l’appel de
vos callback pour les évènements provenant d’un même utilisateur
ne peut être supposé. En contrepartie, vous pouvez contrôler quels
threads vous allouez à quels évènements.</p>

<p>SedNL fournis aussi des outils légers pour sérialiser et envoyer
de façon fiable les instances de vos classes.</p>

<p>Philosophie particulière de cette bibliothèque : la règle est que même
dans des conditions difficiles (plus de mémoire disponible, limite de
connections ouvertes, exceptions levées par vos callback, dysfonctionnement
du système dans la gestion des threads, …) la bibliothèque doit faire tout
ce qui est possible pour conserver un comportement normal.
Toutes les exceptions “std::bad_alloc” sont interceptées et traitées
intelligemment afin de prévenir un malencontreux crash.
En cas de file d’évènements pleine ou d’un manque de mémoire,
les évènements sont temporairement ignorés.
Cela vous permet de ne pas perdre les données de vos utilisateurs encore
en mémoire, et de construire des applications serveur fiables à uptime élevé.
C’est, selon moi, ce que l’on doit attendre de toute vraie bibliothèque réseau.</p>

<p>Il est possible que suite à certaines contraintes techniques SedNL ne soit
pas la bibliothèque la plus adaptée à votre projet. Une lecture rapide de
la documentation devrait vous permettre de savoir si SedNL est adapté à
votre projet, ou si vous devez préférer une autre bibliothèque.
Par exemple, SedNL n’est pas du tout adapter <a href="http://en.wikipedia.org/wiki/Remote_procedure_call">à de la RCP</a>.
Même si le mécanisme d’évènement est ce que vous recherchez,
d’autres alternative C basé aussi sur un mécanisme d’évènement
comme libev / libevent offrent un contrôle plus fin,
au coût d’une API plus complexe et moins intuitive.
Gardez aussi à l’esprit que le design encouragé par SedNL devrait
s’adapter à de nombreuses bibliothèques fournissant un mécanisme
d’évènement, et que la licence autorise diverses modifications
pour des besoins spécifiques.</p>]]></content><author><name>Jérémy Cochoy</name></author><category term="sednl" /><category term="network" /><category term="programming" /><category term="c++" /><category term="software" /><summary type="html"><![CDATA[Présentation de la bibliothèque C++ SEDNL.]]></summary></entry><entry xml:lang="fr"><title type="html">Boite à musique Arduino</title><link href="/music-box/" rel="alternate" type="text/html" title="Boite à musique Arduino" /><published>2013-08-16T00:00:00+03:00</published><updated>2013-08-16T00:00:00+03:00</updated><id>/music-box</id><content type="html" xml:base="/music-box/"><![CDATA[<p>Dans la lignée du dépoussiérage de vieux codes, j’ai ressorti un jeu de quelques fonctions pour arduino que je n’avais pas eu le temps de publier. Il s’agit d’une certaine façon d’une bibliothèque similaire à la lib “Tone” fournie avec l’Arduino. Toutefois, contrairement à cette dernière, c’est bien un instrument polyphonique dont vous disposez. À dire vrai, il y a 4 canaux d’onde carré, et un canal de bruit. On peut de plus régler l’amplitude sonore de chacun des canaux entre 0 (minimum) et 255 (maximum). Il y a tout de même une contrainte ; la somme des amplitudes ne doit pas excéder 255. Ainsi, jouer de la musique est relativement simple. Il suffit de choisir la fréquence et l’amplitude de chaque canal, puis d’attendre un certain laps de temps (fonction delay fournis avec les libs de l’arduino) avant de recommencer. Le bruit est généré grâce à une table de valeurs aléatoires près-calculés, pour des raisons de performances. Vous pouvez réduire ou augmenter la taille de cette table à votre guise, un “script C++”(trop peu de lignes pour parler de programme) permettant de générer le header.</p>

<p>Tout ceci est plutôt abstrait, alors regardons cela de plus près.</p>

<h2 id="montage-de-test-">Montage de test :</h2>

<p>Le montage de test est très similaire à celui du tutoriel tone. Seul change le port sur lequel vous devez connecter votre speacker.</p>

<p><a href="data/music_box_arduino.png"><img src="data/music_box_arduino.png" alt="Montage arduino" /></a></p>

<p>Donc, une résistance d’une centaine d’ohms (prenez ce que vous avez sous la main, plus la résistance sera élevée, moins le volume le sera) reliée à un speacker, ou bien à une prise JACK pour brancher vos enceintes favorites.</p>

<p>Si vous souhaitez changer le port de sortie, il vous faudra toucher au code (et au code asm aussi :/) car le code utilise un mécanisme de l’ATMEGA328P qui n’est disponible que sur les ports 11, 10, 9, 6, 5 et 3 de l’arduino (ceux marqués d’une petite vague). De plus, si vous souhaitez utiliser le port 3 conjointement à ce code, vous risquez d’avoir quelques soucis. (Ces ports sont regroupés en paires, et chaque port d’une paire ne peut émettre un signal qu’à la même fréquence. Vous ne pourrez pas non plus utiliser l’interruption du timer 2, utilisé par ces deux ports. Ici, le code utilise la fréquence maximum possible, donc cela ne devrait à priori pas poser de soucis pour les utilisations les plus simples du port 3, comme contrôler l’intensité lumineuse d’une led).</p>

<h2 id="fonctionnement-de-la-lib">Fonctionnement de la Lib</h2>

<p>L’utilisation se fait via le header Synth_8bits.h qui définit plusieurs variables globales essentielles au fonctionnement.
Dans un premier temps, il faut initialiser la lib en appelant <code class="language-plaintext highlighter-rouge">synth_setup();</code>. Par la suite, vous disposez de 4 variables de période / fréquences :</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">int</span> <span class="n">square1_period</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">square2_period</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">square3_period</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">square4_period</span><span class="p">;</span>
</code></pre></div></div>

<p>En fait, c’est la période de l’onde qui est stockée, exprimée en 62500ième de seconde. Une macro, frequency_to_period(f), s’occupe de convertir une fréquence f (en Hz) en une période. Un exemple d’utilisation serait :</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">square1_period</span> <span class="o">=</span> <span class="n">frequency_to_period</span><span class="p">(</span><span class="mi">440</span><span class="p">);</span> <span class="c1">//Le LA de référence est à 440Hz</span>
</code></pre></div></div>

<p>De nombreuses macros et un tableau sont là pour vous permettre de choisir une note de façon plus agréable :</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">square1_period</span> <span class="o">=</span> <span class="n">frequency_to_period</span><span class="p">(</span><span class="n">NOTE_A4</span><span class="p">);</span> <span class="c1">//Pour encoder, directement dans votre code, une mélodie</span>
<span class="n">square1_period</span> <span class="o">=</span> <span class="n">frequency_to_period</span><span class="p">(</span><span class="n">note_table</span><span class="p">[</span><span class="n">BNOTE_A4</span><span class="p">]);</span> <span class="c1">//Pour pouvoir facilement générer des mélodies à partir d'algorithmes.</span>
</code></pre></div></div>

<p>Reste un détail important : le volume de sortie! Il se fait à l’aide des</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square1_amplitude</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square2_amplitude</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square3_amplitude</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square4_amplitude</span><span class="p">;</span>
</code></pre></div></div>

<p>Où vous pouvez choisir une amplitude sonore entre 0 (pas de son) et 255 (volume maximum). Attention ! La somme des volumes de tous les canaux doit être inférieure à 255 ! (Sinon et ben, ça sera moche et tout sauf musical ;) ).</p>

<p>Vous pouvez ainsi créer vos propres instruments en superposant différentes fréquences, et en modifiant le volume des canaux au cours du temps (par exemple, si vous voulez un son qui s’atténue, décrémentez petit à petit l’amplitude jusqu’à ce qu’elle atteigne 0). Le second exemple sonore exploite cette possibilité.</p>

<p>Pour les percussions, il y a le canal de bruit.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">noise_amplitude</span><span class="p">;</span>
</code></pre></div></div>
<p>C’est un canal qui émet un son similaire à celui d’un vieux téléviseur sans antennes, un “Tshhhhh” très caractéristique. À nouveau, en faisant varier l’amplitude (on parle de modulation d’amplitude), vous pouvez créer le timbre de divers instruments de percussion. La fonction <code class="language-plaintext highlighter-rouge">play_seawave();</code> est un exemple.</p>

<p>Le bruit est près calculé grâce au programme C++ <em>generate_white_noise.cpp.src</em> (qui n’est autre qu’un fichier .cpp). Vous pouvez le bidouiller pour diminuer ou agrandir la table.</p>

<h1 id="code-et-exemple-de-test">Code et exemple de test</h1>

<p>Voici le code directement dans ce billet, et sous la forme d’un tar un peu plus loin. Les commentaires sont plutôt explicites :</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Synth_8bits.h :</span>

<span class="cp">#ifndef SYNTH_8BITS_H_
# define SYNTH_8_BITS_H_
</span>
<span class="c1">//Some macros</span>
<span class="cp">#define frequency_to_period(f) (62500 / (f))
</span>
<span class="cm">/*
#ifdef __cplusplus
extern "C" {
#endif
*/</span>

<span class="cm">/*************************************************************************/</span>
<span class="cm">/* Here come definitions and prototypes for the Synth_8bits library      */</span>
<span class="cm">/* All this stuff is given, without guaranty, and under the BSD licence. */</span>
<span class="cm">/*                                 ---                                   */</span>
<span class="cm">/* By Jeremy Cochoy                                                      */</span>
<span class="cm">/*************************************************************************/</span>

<span class="c1">//White noise table, in progmem</span>
<span class="k">extern</span> <span class="kt">char</span> <span class="n">white_noise</span><span class="p">[</span><span class="mi">4096</span><span class="p">];</span>

<span class="c1">/////////////////////////</span>
<span class="c1">// Settings / Controls //</span>
<span class="c1">/////////////////////////</span>

<span class="c1">//Periods, stored after applying the right calculus with frequency_to_period(int)</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">square1_period</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">square2_period</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">square3_period</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">square4_period</span><span class="p">;</span>

<span class="c1">// 0 = full speed, 255 = slowest (for a tv white noise sound</span>
<span class="c1">// use 20, which i the default value)</span>
<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">noise_speed</span><span class="p">;</span>

<span class="c1">//Output amplitudes. Make sure that the sum of all your amplitudes of synth is &lt; than 256!</span>

<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square1_amplitude</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square2_amplitude</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square3_amplitude</span><span class="p">;</span>
<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square4_amplitude</span><span class="p">;</span>

<span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">noise_amplitude</span><span class="p">;</span>

<span class="cm">/*************************************************
* Public Constants, from Tone Lybrary, by B Hagman
*  see : http://code.google.com/p/arduino-tone/source/browse/trunk/Tone.h
*************************************************/</span>

<span class="cp">#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
</span>
<span class="cm">/**********
 * A table that contain all those frequencies (89)
 * stored in sram.
 **********/</span>
<span class="k">extern</span> <span class="kt">int</span> <span class="n">note_table</span><span class="p">[];</span>

<span class="cm">/**********
 * Give the 8bits index of the previous table, if you know the note
 **********/</span>
<span class="cp">#define BNOTE_B0	0
#define BNOTE_C1	1
#define BNOTE_CS1	2
#define BNOTE_D1	3
#define BNOTE_DS1	4
#define BNOTE_E1	5
#define BNOTE_F1	6
#define BNOTE_FS1	7
#define BNOTE_G1	8
#define BNOTE_GS1	9
#define BNOTE_A1	10
#define BNOTE_AS1	11
#define BNOTE_B1	12
#define BNOTE_C2	13
#define BNOTE_CS2	14
#define BNOTE_D2	15
#define BNOTE_DS2	16
#define BNOTE_E2	17
#define BNOTE_F2	18
#define BNOTE_FS2	19
#define BNOTE_G2	20
#define BNOTE_GS2	21
#define BNOTE_A2	22
#define BNOTE_AS2	23
#define BNOTE_B2	24
#define BNOTE_C3	25
#define BNOTE_CS3	26
#define BNOTE_D3	27
#define BNOTE_DS3	28
#define BNOTE_E3	29
#define BNOTE_F3	30
#define BNOTE_FS3	31
#define BNOTE_G3	32
#define BNOTE_GS3	33
#define BNOTE_A3	34
#define BNOTE_AS3	35
#define BNOTE_B3	36
#define BNOTE_C4	37
#define BNOTE_CS4	38
#define BNOTE_D4	39
#define BNOTE_DS4	40
#define BNOTE_E4	41
#define BNOTE_F4	42
#define BNOTE_FS4	43
#define BNOTE_G4	44
#define BNOTE_GS4	45
#define BNOTE_A4	46
#define BNOTE_AS4	47
#define BNOTE_B4	48
#define BNOTE_C5	49
#define BNOTE_CS5	50
#define BNOTE_D5	51
#define BNOTE_DS5	52
#define BNOTE_E5	53
#define BNOTE_F5	54
#define BNOTE_FS5	55
#define BNOTE_G5	56
#define BNOTE_GS5	57
#define BNOTE_A5	58
#define BNOTE_AS5	59
#define BNOTE_B5	60
#define BNOTE_C6	61
#define BNOTE_CS6	62
#define BNOTE_D6	63
#define BNOTE_DS6	64
#define BNOTE_E6	65
#define BNOTE_F6	66
#define BNOTE_FS6	67
#define BNOTE_G6	68
#define BNOTE_GS6	69
#define BNOTE_A6	70
#define BNOTE_AS6	71
#define BNOTE_B6	72
#define BNOTE_C7	73
#define BNOTE_CS7	74
#define BNOTE_D7	75
#define BNOTE_DS7	76
#define BNOTE_E7	77
#define BNOTE_F7	78
#define BNOTE_FS7	79
#define BNOTE_G7	80
#define BNOTE_GS7	81
#define BNOTE_A7	82
#define BNOTE_AS7	83
#define BNOTE_B7	84
#define BNOTE_C8	85
#define BNOTE_CS8	86
#define BNOTE_D8	87
#define BNOTE_DS8	88
</span>
<span class="c1">//////////////</span>
<span class="c1">//Prototypes//</span>
<span class="c1">//////////////</span>

<span class="c1">//Initialisation (call it in void setup() )</span>
<span class="kt">void</span> <span class="nf">synth_setup</span><span class="p">();</span>

<span class="c1">//Play some chord 'like' an orgue</span>
<span class="c1">// (do not forget to delay a little time after...)</span>
<span class="kt">void</span> <span class="nf">play_org</span><span class="p">(</span><span class="kt">int</span> <span class="n">f</span><span class="p">);</span>

<span class="c1">//Play waves from the sea/beach</span>
<span class="c1">// (just call it in a while(true) )</span>
<span class="kt">void</span> <span class="nf">play_seawave</span><span class="p">();</span>

<span class="cm">/*
#ifdef __cplusplus
}
#endif
*/</span>

<span class="cp">#endif </span><span class="cm">/* !SYNTH_8BITS_H_ */</span><span class="cp">
</span><span class="o">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
<span class="n">Synth_8bits_lib</span><span class="p">.</span><span class="n">cpp</span> <span class="o">:&lt;</span><span class="n">pre</span> <span class="n">lang</span><span class="o">=</span><span class="s">"C"</span> <span class="n">colla</span><span class="o">=</span><span class="s">"-"</span><span class="o">&gt;</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">avr</span><span class="o">/</span><span class="n">io</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
<span class="cp">#include &lt;avr/interrupt.h&gt;
</span>
<span class="cp">#include &lt;Arduino.h&gt;
</span>
<span class="cp">#include "Synth_8bits.h"
#include "white_noise.h"
</span>
<span class="c1">//Periods, stored after applying the right calculus with frequency_to_period(int)</span>
<span class="kt">int</span> <span class="n">square1_period</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">square2_period</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">square3_period</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">square4_period</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// 0 = full speed, 255 = slowest (for a tv white noise sound, use 20</span>
<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">noise_speed</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="c1">//Output amplitudes. Make sure that the sum of all your amplitudes of synth is &lt; than 256!</span>

<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square1_amplitude</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square2_amplitude</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square3_amplitude</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">square4_amplitude</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">noise_amplitude</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">///////////////////////</span>
<span class="c1">// PRIVATE VARIABLES //</span>
<span class="c1">///////////////////////</span>
<span class="c1">//Counters used to synthetise at the right frequency</span>

<span class="kt">int</span> <span class="n">square1_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">square2_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">square3_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">square4_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">noise_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">noise_delay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">//Note table</span>
<span class="kt">int</span> <span class="n">note_table</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">31</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span>
  <span class="mi">104</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">131</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">147</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">165</span><span class="p">,</span> <span class="mi">175</span><span class="p">,</span> <span class="mi">185</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">208</span><span class="p">,</span> <span class="mi">220</span><span class="p">,</span> <span class="mi">233</span><span class="p">,</span> <span class="mi">247</span><span class="p">,</span> <span class="mi">262</span><span class="p">,</span> <span class="mi">277</span><span class="p">,</span> <span class="mi">294</span><span class="p">,</span> <span class="mi">311</span><span class="p">,</span> <span class="mi">330</span><span class="p">,</span>
  <span class="mi">349</span><span class="p">,</span> <span class="mi">370</span><span class="p">,</span> <span class="mi">392</span><span class="p">,</span> <span class="mi">415</span><span class="p">,</span> <span class="mi">440</span><span class="p">,</span> <span class="mi">466</span><span class="p">,</span> <span class="mi">494</span><span class="p">,</span> <span class="mi">523</span><span class="p">,</span> <span class="mi">554</span><span class="p">,</span> <span class="mi">587</span><span class="p">,</span> <span class="mi">622</span><span class="p">,</span> <span class="mi">659</span><span class="p">,</span> <span class="mi">698</span><span class="p">,</span> <span class="mi">740</span><span class="p">,</span> <span class="mi">784</span><span class="p">,</span> <span class="mi">831</span><span class="p">,</span> <span class="mi">880</span><span class="p">,</span> <span class="mi">932</span><span class="p">,</span> <span class="mi">988</span><span class="p">,</span> <span class="mi">1047</span><span class="p">,</span> <span class="mi">1109</span><span class="p">,</span>
  <span class="mi">1175</span><span class="p">,</span> <span class="mi">1245</span><span class="p">,</span> <span class="mi">1319</span><span class="p">,</span> <span class="mi">1397</span><span class="p">,</span> <span class="mi">1480</span><span class="p">,</span> <span class="mi">1568</span><span class="p">,</span> <span class="mi">1661</span><span class="p">,</span> <span class="mi">1760</span><span class="p">,</span> <span class="mi">1865</span><span class="p">,</span> <span class="mi">1976</span><span class="p">,</span> <span class="mi">2093</span><span class="p">,</span> <span class="mi">2217</span><span class="p">,</span> <span class="mi">2349</span><span class="p">,</span> <span class="mi">2489</span><span class="p">,</span> <span class="mi">2637</span><span class="p">,</span> <span class="mi">2794</span><span class="p">,</span> <span class="mi">2960</span><span class="p">,</span> <span class="mi">3136</span><span class="p">,</span>
  <span class="mi">3322</span><span class="p">,</span> <span class="mi">3520</span><span class="p">,</span> <span class="mi">3729</span><span class="p">,</span> <span class="mi">3951</span><span class="p">,</span> <span class="mi">4186</span><span class="p">,</span> <span class="mi">4435</span><span class="p">,</span> <span class="mi">4699</span><span class="p">,</span> <span class="mi">4978</span><span class="p">};</span>

<span class="kt">void</span> <span class="nf">synth_setup</span><span class="p">()</span>
<span class="p">{</span>
  <span class="c1">//Fast PWM</span>
  <span class="c1">//COM2A 1:0 = 2 -&gt; not inverted</span>
  <span class="c1">//WGM0 2:1:0 = 3 -&gt; FAST PWM</span>
  <span class="n">TCCR2A</span> <span class="o">=</span> <span class="n">_BV</span><span class="p">(</span><span class="n">COM2A1</span><span class="p">)</span> <span class="o">|</span> <span class="n">_BV</span><span class="p">(</span><span class="n">WGM01</span><span class="p">)</span> <span class="o">|</span> <span class="n">_BV</span><span class="p">(</span><span class="n">WGM00</span><span class="p">);</span>

  <span class="c1">//Timer setting</span>
  <span class="c1">//Setup the mask</span>
  <span class="n">TIMSK2</span> <span class="o">=</span> <span class="n">_BV</span><span class="p">(</span><span class="n">TOIE2</span><span class="p">);</span>
  <span class="c1">//Set N=1 : no divisor</span>
  <span class="n">TCCR2B</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">CS22</span> <span class="o">|</span> <span class="mi">0</span> <span class="o">&lt;&lt;</span> <span class="n">CS21</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">CS20</span><span class="p">;</span>

  <span class="c1">//OC2A[The pwm pin] is pin B3(~11)</span>
  <span class="n">DDRB</span> <span class="o">=</span> <span class="n">_BV</span><span class="p">(</span><span class="n">DDB3</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/*
// OLD C-CODE
// TOO SLOW TO BE USED AT THIS FREQUENCY :(

void inline compute_square_wave(int &amp;out, int &amp;square_id, unsigned char &amp;square_amplitude, int &amp;square_period)
{
  square_id = square_id &amp; (4096 - 1);
  if (square_id &gt; 2048)
    out += square_amplitude;
  //Center the square wave
  out -= square_amplitude &gt;&gt; 1;
  square_id += square_period;
};

//The synthetiser
ISR(TIMER2_OVF_vect)
{
   int out = 128;

  //Square waves
  compute_square_wave(out, square1_id, square1_amplitude, square1_period);
  compute_square_wave(out, square2_id, square2_amplitude, square2_period);
  //compute_square_wave(out, square3_id, square3_amplitude, square3_period);

  OCR2A = out;
}
*/</span>

<span class="c1">// ------------ SQUARE WAVE GENERATOR -----------------------+</span>
<span class="cp">#define square_wave0(amplitude, period, id)                  \
      asm volatile (                                         \
    	"lds r24, " period "\n" </span><span class="cm">/* load period low */</span><span class="cp">        \
	"lds r25, (" period ")+1\n" </span><span class="cm">/* load period high */</span><span class="cp">       \
        "lds r30, " id "\n" </span><span class="cm">/* load id low */</span><span class="cp">                \
        "lds r31, (" id ")+1\n" </span><span class="cm">/* load id high */</span><span class="cp">           \
        "lds r28, " amplitude "\n" </span><span class="cm">/* load amplitude */</span><span class="cp">      \
                                                             \
        </span><span class="cm">/* square1_id &amp;= (8192-1) ; 4096-1 = 0xFFF */</span><span class="cp">        \
        "andi r31, hi8(8191)\n"                              \
                                                             \
        </span><span class="cm">/* if (r &gt;= 4096) goto .Lb_&lt;something&gt; */</span><span class="cp">            \
        "cpi r31, hi8(4096)\n"                               \
        "brge .Lb_%=\n"                                      \
                                                             \
        </span><span class="cm">/* Add the amplitude */</span><span class="cp">                              \
        "add r23, r28\n"                                     \
                                                             \
        ".Lb_%=:\n"                                          \
                                                             \
        </span><span class="cm">/* out -= square_amplitude/2 */</span><span class="cp">                      \
        "lsr r28\n" </span><span class="cm">/* logical shift right = &gt;&gt; 1 */</span><span class="cp">         \
        "sub r23, r28\n"                                     \
                                                             \
        </span><span class="cm">/* square_id += square_period */</span><span class="cp">                     \
        "add r30,r24\n"                                      \
        "adc r31,r25\n"                                      \
        "sts " id ",r30\n"                                   \
        "sts (" id ")+1,r31\n"                               \
        ::)
</span>
<span class="cm">/* NEW ONE  */</span>
<span class="c1">// ------------ SQUARE WAVE GENERATOR -----------------------+</span>
<span class="cp">#define square_wave(amplitude, period, id)                   \
      asm volatile (                                         \
    	"lds r24, " period "\n" </span><span class="cm">/* load period low */</span><span class="cp">        \
	"lds r25, (" period ")+1\n" </span><span class="cm">/* load period high */</span><span class="cp">       \
        "lds r30, " id "\n" </span><span class="cm">/* load id low */</span><span class="cp">                \
        "lds r31, (" id ")+1\n" </span><span class="cm">/* load id high */</span><span class="cp">           \
        "lds r28, " amplitude "\n" </span><span class="cm">/* load amplitude */</span><span class="cp">      \
                                                             \
        </span><span class="cm">/* if (id &lt; period) goto .do_not_reset_&lt;something&gt; */</span><span class="cp">\
        "cp r30, r24\n"                                      \
        "cpc r31, r25\n"                                     \
        "brlt .do_not_reset_%=\n"                            \
        </span><span class="cm">/* Reset id and go to the end of the function */</span><span class="cp">     \
        "ldi r30,0\n" </span><span class="cm">/* id = 0 */</span><span class="cp">                           \
        "ldi r31,0\n"                                        \
        "sts " id ",r30\n"                                   \
        "sts (" id ")+1,r31\n"                               \
        "rjmp .end_%=\n"                                     \
        ".do_not_reset_%=:\n"                                \
                                                             \
        </span><span class="cm">/* if (id &gt;= period/2) goto .Lb_&lt;something&gt; */</span><span class="cp">       \
        "lsr r25\n"                                          \
        "ror r24\n"                                          \
        "cp r30, r24\n"                                      \
        "cpc r31, r25\n"                                     \
        "brge .Lb_%=\n"                                      \
                                                             \
        </span><span class="cm">/* Add the amplitude */</span><span class="cp">                              \
        "add r23, r28\n"                                     \
                                                             \
        ".Lb_%=:\n"                                          \
                                                             \
        </span><span class="cm">/* out -= square_amplitude/2 */</span><span class="cp">                      \
        "lsr r28\n" </span><span class="cm">/* logical shift right = &gt;&gt; 1 */</span><span class="cp">         \
        "sub r23, r28\n"                                     \
                                                             \
        </span><span class="cm">/* square_id += 1 */</span><span class="cp">                                 </span><span class="cm">/*
        // You can also use :
        "ldi r24, 1\n"                                       \
        "ldi r25, 0\n"                                       \
        "add r30,r24\n"                                      \
        "adc r31,r25\n"                                      \*/</span><span class="cp">\
        "adiw r30, 1\n"                                      \
        "sts " id ",r30\n"                                   \
        "sts (" id ")+1,r31\n"                               \
                                                             \
        ".end_%=:\n"                                         \
        ::)
</span>
<span class="n">ISR</span><span class="p">(</span><span class="n">TIMER2_OVF_vect</span><span class="p">,</span> <span class="n">ISR_NAKED</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">asm</span> <span class="k">volatile</span> <span class="p">(</span>
    <span class="s">"push r30</span><span class="se">\n</span><span class="s">"</span> <span class="c1">//square_id low</span>
    <span class="s">"push r31</span><span class="se">\n</span><span class="s">"</span> <span class="c1">//square_id high</span>
    <span class="s">"push r28</span><span class="se">\n</span><span class="s">"</span> <span class="c1">//square_amplitude</span>
    <span class="s">"push r23</span><span class="se">\n</span><span class="s">"</span> <span class="c1">//out</span>
    <span class="s">"push r24</span><span class="se">\n</span><span class="s">"</span> <span class="c1">//square_period low</span>
    <span class="s">"push r25</span><span class="se">\n</span><span class="s">"</span> <span class="c1">//square_period high</span>
    <span class="s">"in r23, __SREG__</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"push r23</span><span class="se">\n</span><span class="s">"</span>

    <span class="s">"ldi r23, lo8(128)</span><span class="se">\n</span><span class="s">"</span> <span class="c1">//out=128</span>
    <span class="p">);</span>

  <span class="c1">//---------------</span>
  <span class="c1">//-  SQUARE  1  -</span>
  <span class="c1">//---------------</span>
  <span class="n">square_wave</span><span class="p">(</span><span class="s">"square1_amplitude"</span><span class="p">,</span> <span class="s">"square1_period"</span><span class="p">,</span> <span class="s">"square1_id"</span><span class="p">);</span>
  <span class="c1">//---------------</span>

  <span class="c1">//---------------</span>
  <span class="c1">//-  SQUARE  2  -</span>
  <span class="c1">//---------------</span>
  <span class="n">square_wave</span><span class="p">(</span><span class="s">"square2_amplitude"</span><span class="p">,</span> <span class="s">"square2_period"</span><span class="p">,</span> <span class="s">"square2_id"</span><span class="p">);</span>
  <span class="c1">//---------------</span>

  <span class="c1">//---------------</span>
  <span class="c1">//-  SQUARE  3  -</span>
  <span class="c1">//---------------</span>
  <span class="n">square_wave</span><span class="p">(</span><span class="s">"square3_amplitude"</span><span class="p">,</span> <span class="s">"square3_period"</span><span class="p">,</span> <span class="s">"square3_id"</span><span class="p">);</span>
  <span class="c1">//---------------</span>

  <span class="c1">//---------------</span>
  <span class="c1">//-  SQUARE  4  -</span>
  <span class="c1">//---------------</span>
  <span class="n">square_wave</span><span class="p">(</span><span class="s">"square4_amplitude"</span><span class="p">,</span> <span class="s">"square4_period"</span><span class="p">,</span> <span class="s">"square4_id"</span><span class="p">);</span>
  <span class="c1">//---------------</span>

  <span class="n">asm</span> <span class="k">volatile</span> <span class="p">(</span>
    <span class="c1">//if (noise_amplitude) : when there is no noise (in fact often ;) )</span>
    <span class="c1">// we skip all these code an prevent a lot's of cycles.</span>
    <span class="s">"lds r30, noise_amplitude</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"cpi r30, 0</span><span class="se">\n</span><span class="s">"</span>

    <span class="s">"breq .no_noise</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//Load noise id</span>
    <span class="s">"lds r24, noise_id</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"lds r25, (noise_id)+1</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//Load white_noise addr</span>
    <span class="s">"ldi r30, lo8(white_noise)</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"ldi r31, hi8(white_noise)</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//Sum noise_id and white_noise</span>
    <span class="s">"add r30, r24</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"adc r31, r25</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//Load noise value into r28</span>
    <span class="s">"lpm r28, Z</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//We will use mult!</span>
    <span class="s">"push r0</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"push r1</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//Load noise amplitude</span>
    <span class="s">"lds r30, noise_amplitude</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//r1:r0 = white_noise[noise_id] * noise_amplitude</span>
    <span class="s">"mul r28, r30</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//Add white_noise[noise_id] to out</span>
    <span class="c1">// (We want to divide r1:r0 by 255, but it's easyer to divide by 256, i.e.</span>
    <span class="c1">// only take the hight part r1 of the result :)</span>
    <span class="s">"add r23, r1</span><span class="se">\n</span><span class="s">"</span>

    <span class="s">"pop r1</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"pop r0</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//Load the delay value</span>
    <span class="s">"lds r30, noise_delay</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"lds r31, noise_speed</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//If noise_delay &lt;= noise_speed</span>
    <span class="s">"cp r30, r31</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"brge .inc_noise</span><span class="se">\n</span><span class="s">"</span>
    <span class="c1">//Increment noise_delay</span>
    <span class="s">"inc r30</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"rjmp .endif_delay_lt_speed</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//else</span>
    <span class="s">".inc_noise:</span><span class="se">\n</span><span class="s">"</span>
    <span class="c1">//noise_delay = 0</span>
    <span class="s">"ldi r30, lo8(0)</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//Increment noise_id of 1</span>
    <span class="s">"ldi r28, 1</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"add r24, r28</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"ldi r28, 0</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"adc r25, r28</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"andi r25, hi8(4095)</span><span class="se">\n</span><span class="s">"</span>
    <span class="c1">//Store the new noise_id value</span>
    <span class="s">"sts noise_id, r24</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"sts (noise_id)+1, r25</span><span class="se">\n</span><span class="s">"</span>

    <span class="s">".endif_delay_lt_speed:</span><span class="se">\n</span><span class="s">"</span>
    <span class="c1">//Store the new noise_delay value</span>
    <span class="s">"sts noise_delay, r30</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//endif (noise_activated)</span>
    <span class="s">".no_noise:</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

  <span class="n">asm</span> <span class="k">volatile</span> <span class="p">(</span>
    <span class="c1">//Update OCR2A with the out(r23) value calculated</span>
    <span class="s">"ldi r30,lo8(179)</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"ldi r31,hi8(179)</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"st Z, r23</span><span class="se">\n</span><span class="s">"</span>

    <span class="c1">//pop saved registers</span>
    <span class="s">"pop r23</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"out __SREG__, r23</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"pop r25</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"pop r24</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"pop r23</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"pop r28</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"pop r31</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"pop r30</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="n">reti</span><span class="p">();</span>
<span class="p">}</span>


<span class="c1">///////////////////////////////////////////////</span>
<span class="c1">// Funny functions, used to make some noises //</span>
<span class="c1">///////////////////////////////////////////////</span>


<span class="kt">void</span> <span class="nf">play_org</span><span class="p">(</span><span class="kt">int</span> <span class="n">f</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">square1_amplitude</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="n">square1_period</span> <span class="o">=</span> <span class="n">frequency_to_period</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>

    <span class="n">square2_amplitude</span> <span class="o">=</span> <span class="mi">60</span><span class="p">;</span>
    <span class="n">square2_period</span> <span class="o">=</span> <span class="n">frequency_to_period</span><span class="p">(</span><span class="n">f</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>

    <span class="n">square3_amplitude</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
    <span class="n">square3_period</span> <span class="o">=</span> <span class="n">frequency_to_period</span><span class="p">(</span><span class="n">f</span><span class="o">*</span><span class="mi">4</span><span class="p">);</span>

    <span class="n">square4_amplitude</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="n">square4_period</span> <span class="o">=</span> <span class="n">frequency_to_period</span><span class="p">(</span><span class="n">f</span><span class="o">*</span><span class="mi">8</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">play_seawave</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">for</span> <span class="p">(;</span> <span class="n">noise_amplitude</span> <span class="o">&lt;</span> <span class="mi">120</span><span class="p">;)</span>
  <span class="p">{</span>
   <span class="n">noise_amplitude</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span>
   <span class="n">delay</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">for</span> <span class="p">(;</span> <span class="n">noise_amplitude</span> <span class="o">&gt;</span> <span class="mi">10</span><span class="p">;)</span>
  <span class="p">{</span>
   <span class="n">noise_amplitude</span><span class="o">-=</span><span class="mi">4</span><span class="p">;</span>
   <span class="n">delay</span><span class="p">(</span><span class="mi">40</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">700</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<pre><code class="language-{.c}">// white_noise.h :

#ifndef WHITE_NOISE_H_
 #define WHITE_NOISE_H_

#include &lt;avr/pgmspace.h&gt;

char white_noise[4096] PROGMEM = {
70, 100, 49, 41, 100, 134, 237, 156, 215, 31, 194, 7, 37, 72, 32, 162,
196, 168, 90, 235, 11, 32, 65, 73, 79, 139, 241, 248, 205, 48, 241, 19,
148, 34, 60, 248, 168, 41, 149, 128, 73, 87, 135, 110, 159, 167, 17, 99,
80, 107, 78, 91, 140, 143, 164, 219, 27, 149, 211, 232, 197, 197, 251, 90,
231, 55, 82, 144, 96, 231, 16, 169, 62, 151, 24, 221, 62, 41, 65, 142,
148, 143, 233, 32, 31, 141, 251, 58, 34, 207, 34, 232, 148, 29, 66, 123,
84, 148, 11, 180, 124, 27, 94, 186, 178, 118, 152, 241, 159, 217, 127, 51,
104, 105, 84, 135, 246, 79, 193, 25, 30, 227, 1, 178, 0, 67, 46, 84,
215, 57, 9, 83, 85, 103, 14, 7, 221, 166, 248, 124, 127, 120, 175, 231,
225, 3, 111, 215, 83, 48, 240, 113, 20, 241, 36, 20, 52, 82, 105, 12,
139, 114, 95, 224, 217, 109, 232, 182, 19, 224, 50, 146, 88, 225, 122, 57,
229, 233, 17, 56, 25, 1, 169, 45, 243, 205, 66, 39, 31, 171, 51, 171,
29, 147, 139, 246, 0, 115, 172, 20, 84, 222, 166, 172, 191, 32, 230, 164,
9, 247, 220, 35, 248, 134, 80, 235, 83, 146, 19, 115, 61, 70, 30, 90,
217, 169, 80, 218, 29, 252, 238, 113, 218, 148, 29, 154, 181, 3, 62, 190,
250, 27, 225, 243, 161, 50, 222, 244, 196, 241, 103, 2, 56, 133, 92, 17,
47, 173, 235, 76, 169, 217, 189, 132, 110, 218, 30, 35, 222, 92, 225, 216,
119, 195, 203, 24, 245, 170, 13, 185, 155, 116, 187, 211, 250, 24, 229, 41,
197, 208, 117, 110, 170, 50, 242, 24, 12, 16, 59, 234, 109, 28, 195, 228,
223, 142, 253, 212, 56, 10, 142, 212, 126, 73, 167, 120, 97, 140, 161, 38,
93, 22, 149, 7, 72, 135, 31, 85, 152, 90, 63, 5, 118, 2, 233, 86,
145, 230, 42, 201, 240, 184, 157, 111, 2, 69, 231, 99, 209, 137, 138, 46,
159, 31, 53, 232, 166, 84, 61, 62, 174, 124, 67, 37, 127, 45, 123, 16,
19, 165, 217, 4, 94, 119, 115, 96, 188, 90, 195, 141, 227, 77, 188, 131,
108, 241, 107, 19, 70, 168, 81, 244, 36, 149, 25, 163, 194, 148, 179, 213,
58, 141, 217, 152, 4, 76, 248, 192, 167, 187, 77, 138, 9, 9, 13, 117,
251, 120, 136, 65, 32, 218, 53, 69, 111, 79, 232, 49, 227, 156, 6, 29,
41, 224, 181, 45, 44, 173, 237, 211, 105, 58, 94, 114, 68, 107, 231, 63,
228, 112, 128, 4, 74, 181, 73, 185, 4, 50, 234, 232, 206, 240, 5, 247,
208, 187, 36, 253, 104, 17, 208, 209, 75, 46, 67, 143, 154, 43, 206, 126,
155, 78, 130, 229, 4, 204, 158, 8, 254, 136, 240, 204, 120, 246, 195, 73,
177, 231, 70, 25, 248, 22, 235, 67, 69, 46, 211, 223, 89, 161, 93, 244,
240, 223, 217, 244, 171, 119, 252, 169, 255, 237, 117, 120, 227, 56, 193, 148,
31, 7, 173, 23, 29, 152, 91, 98, 199, 46, 65, 32, 207, 158, 21, 191,
126, 238, 179, 41, 102, 176, 211, 101, 157, 72, 221, 128, 129, 158, 20, 160,
165, 193, 184, 195, 90, 19, 37, 33, 65, 103, 65, 16, 5, 86, 208, 131,
69, 131, 173, 171, 51, 128, 16, 208, 200, 238, 80, 73, 140, 100, 234, 50,
38, 162, 245, 128, 181, 26, 161, 246, 129, 226, 6, 135, 57, 214, 10, 126,
90, 183, 41, 141, 55, 57, 94, 0, 39, 174, 73, 180, 19, 51, 230, 57,
213, 219, 185, 138, 245, 90, 128, 119, 60, 135, 254, 117, 93, 8, 243, 183,
192, 28, 69, 247, 86, 163, 247, 125, 81, 65, 49, 100, 116, 23, 157, 74,
242, 86, 212, 232, 176, 85, 95, 237, 220, 93, 98, 57, 101, 86, 241, 37,
114, 54, 29, 200, 217, 20, 70, 42, 85, 119, 143, 202, 143, 44, 20, 129,
131, 232, 105, 51, 61, 200, 32, 25, 37, 131, 83, 139, 217, 68, 176, 75,
122, 205, 20, 83, 226, 90, 125, 55, 209, 12, 1, 96, 57, 21, 226, 188,
254, 75, 239, 59, 20, 16, 85, 57, 147, 168, 196, 108, 236, 117, 183, 102,
66, 203, 185, 36, 37, 54, 92, 247, 67, 93, 87, 124, 115, 57, 56, 113,
133, 39, 172, 153, 55, 1, 210, 202, 169, 151, 54, 149, 12, 238, 251, 78,
185, 180, 115, 223, 235, 207, 214, 46, 44, 45, 170, 159, 103, 226, 16, 236,
9, 189, 133, 65, 190, 87, 11, 104, 238, 66, 253, 250, 48, 249, 73, 233,
173, 188, 200, 152, 139, 158, 198, 183, 204, 112, 87, 51, 82, 103, 31, 92,
36, 164, 157, 227, 251, 168, 75, 234, 234, 72, 228, 26, 65, 45, 4, 239,
233, 204, 135, 116, 107, 78, 44, 55, 190, 131, 106, 17, 234, 137, 109, 15,
45, 10, 242, 40, 178, 61, 18, 157, 133, 247, 183, 199, 36, 187, 182, 14,
136, 61, 130, 243, 139, 174, 42, 74, 49, 148, 91, 28, 29, 200, 43, 74,
210, 29, 114, 132, 90, 133, 33, 223, 124, 217, 166, 160, 148, 92, 174, 28,
154, 49, 15, 37, 223, 57, 111, 17, 205, 202, 45, 234, 146, 88, 52, 100,
117, 167, 233, 207, 44, 10, 174, 168, 227, 85, 72, 120, 177, 247, 148, 75,
40, 164, 113, 7, 221, 224, 24, 171, 171, 69, 149, 61, 157, 202, 162, 18,
113, 139, 225, 157, 149, 144, 69, 121, 229, 141, 241, 150, 132, 133, 226, 172,
41, 83, 180, 7, 51, 204, 178, 222, 18, 71, 28, 175, 17, 190, 194, 130,
73, 163, 31, 222, 51, 100, 87, 24, 242, 72, 175, 118, 206, 145, 35, 247,
228, 215, 254, 23, 163, 176, 246, 181, 248, 18, 101, 9, 208, 39, 140, 25,
202, 171, 247, 254, 16, 79, 22, 2, 151, 197, 120, 101, 86, 155, 93, 58,
114, 91, 82, 22, 12, 72, 203, 4, 90, 48, 13, 42, 87, 153, 67, 34,
69, 58, 32, 85, 137, 54, 87, 33, 252, 207, 134, 82, 107, 227, 141, 221,
63, 223, 243, 75, 39, 191, 79, 129, 239, 92, 171, 71, 246, 238, 105, 59,
40, 137, 144, 178, 191, 231, 211, 187, 182, 89, 14, 33, 61, 155, 255, 124,
122, 242, 199, 161, 177, 22, 34, 161, 114, 205, 232, 104, 187, 81, 163, 227,
218, 51, 149, 153, 26, 104, 85, 209, 194, 99, 242, 255, 254, 241, 123, 120,
228, 66, 25, 149, 88, 59, 54, 202, 8, 30, 51, 195, 111, 214, 166, 73,
10, 60, 227, 36, 164, 56, 245, 102, 155, 232, 101, 153, 217, 224, 17, 189,
34, 42, 83, 122, 101, 137, 69, 109, 168, 120, 48, 23, 78, 214, 97, 88,
18, 68, 125, 183, 124, 114, 29, 23, 90, 131, 176, 52, 99, 193, 241, 134,
235, 68, 0, 80, 206, 69, 189, 118, 189, 237, 141, 12, 195, 238, 100, 214,
50, 225, 141, 174, 84, 170, 197, 174, 45, 117, 226, 145, 54, 212, 23, 33,
24, 23, 113, 230, 93, 46, 92, 26, 27, 234, 38, 223, 216, 139, 181, 11,
108, 66, 185, 192, 236, 127, 111, 26, 244, 81, 171, 43, 37, 194, 76, 62,
217, 190, 36, 54, 236, 129, 81, 8, 107, 119, 231, 67, 2, 156, 78, 111,
222, 8, 47, 202, 135, 158, 228, 123, 240, 143, 166, 21, 81, 243, 83, 43,
177, 120, 97, 157, 249, 178, 165, 100, 42, 140, 167, 44, 40, 246, 155, 6,
254, 203, 209, 133, 105, 181, 0, 89, 69, 167, 111, 150, 154, 194, 193, 75,
58, 35, 232, 51, 213, 142, 151, 255, 26, 63, 44, 67, 53, 199, 73, 51,
146, 26, 184, 252, 208, 184, 85, 21, 95, 196, 171, 249, 135, 109, 68, 193,
144, 45, 245, 101, 187, 140, 101, 213, 203, 145, 24, 0, 88, 98, 51, 235,
124, 235, 231, 76, 164, 60, 97, 3, 1, 13, 253, 136, 122, 65, 73, 10,
110, 62, 111, 41, 203, 212, 255, 150, 101, 23, 151, 190, 121, 202, 169, 246,
182, 144, 66, 90, 204, 164, 93, 205, 177, 90, 85, 43, 156, 159, 53, 10,
221, 164, 52, 168, 121, 51, 63, 222, 74, 214, 156, 196, 160, 69, 186, 86,
213, 252, 176, 162, 160, 14, 111, 81, 104, 197, 124, 4, 100, 177, 15, 65,
86, 67, 234, 207, 118, 41, 173, 192, 255, 74, 132, 159, 143, 62, 246, 101,
59, 166, 7, 219, 180, 118, 45, 29, 59, 169, 33, 159, 91, 48, 225, 177,
115, 203, 128, 233, 244, 45, 170, 243, 119, 46, 146, 7, 109, 136, 108, 168,
47, 115, 131, 227, 233, 176, 0, 37, 90, 34, 196, 181, 82, 165, 102, 198,
112, 230, 175, 100, 19, 89, 87, 139, 136, 234, 146, 245, 114, 254, 157, 161,
113, 32, 133, 90, 209, 133, 127, 43, 167, 68, 224, 250, 233, 70, 192, 90,
44, 111, 190, 63, 201, 22, 202, 81, 0, 92, 70, 114, 90, 227, 20, 203,
3, 153, 38, 212, 30, 165, 255, 198, 233, 223, 192, 211, 37, 128, 45, 81,
239, 235, 145, 184, 1, 91, 9, 1, 184, 79, 116, 18, 50, 136, 222, 54,
33, 4, 10, 63, 169, 10, 5, 147, 233, 197, 102, 15, 69, 147, 96, 53,
126, 241, 237, 128, 77, 247, 129, 5, 70, 245, 23, 121, 125, 245, 175, 158,
249, 185, 222, 163, 195, 227, 54, 173, 169, 156, 188, 238, 47, 28, 35, 173,
14, 17, 45, 91, 8, 175, 96, 78, 164, 119, 199, 34, 109, 118, 192, 102,
48, 158, 9, 243, 130, 63, 160, 43, 219, 92, 25, 10, 121, 61, 184, 135,
78, 229, 226, 86, 148, 66, 164, 57, 185, 108, 91, 38, 226, 27, 141, 18,
186, 150, 6, 60, 214, 166, 103, 177, 3, 128, 188, 124, 189, 116, 3, 11,
89, 229, 97, 238, 39, 6, 39, 224, 114, 130, 7, 84, 157, 148, 103, 87,
42, 109, 147, 0, 19, 250, 178, 22, 123, 110, 146, 56, 226, 149, 68, 59,
122, 165, 41, 161, 171, 80, 130, 29, 210, 137, 114, 112, 29, 217, 199, 71,
70, 91, 72, 89, 85, 250, 112, 208, 104, 2, 9, 74, 152, 77, 133, 18,
242, 175, 180, 158, 255, 54, 187, 210, 191, 45, 66, 220, 6, 9, 35, 76,
100, 107, 166, 186, 101, 22, 138, 205, 24, 147, 23, 176, 224, 157, 195, 211,
76, 119, 113, 75, 173, 44, 29, 108, 90, 95, 72, 96, 105, 107, 173, 205,
215, 83, 135, 60, 105, 18, 10, 129, 165, 33, 50, 134, 190, 245, 89, 10,
108, 202, 86, 25, 246, 115, 133, 80, 211, 205, 177, 60, 56, 94, 9, 15,
177, 145, 76, 26, 163, 86, 155, 72, 119, 205, 206, 54, 194, 39, 64, 46,
241, 150, 71, 232, 10, 204, 56, 221, 153, 233, 25, 210, 71, 34, 225, 248,
179, 45, 18, 86, 131, 174, 159, 251, 123, 109, 49, 62, 149, 113, 108, 134,
8, 180, 110, 18, 128, 167, 239, 26, 144, 8, 236, 216, 42, 205, 208, 222,
251, 227, 52, 126, 145, 211, 121, 12, 65, 170, 74, 214, 28, 183, 92, 36,
107, 203, 54, 235, 114, 37, 5, 2, 45, 241, 218, 87, 191, 171, 53, 186,
142, 106, 56, 31, 61, 178, 43, 126, 92, 118, 84, 120, 45, 177, 156, 152,
124, 210, 131, 238, 247, 137, 240, 36, 122, 203, 124, 57, 118, 177, 243, 4,
27, 44, 35, 89, 222, 78, 215, 58, 196, 44, 179, 241, 221, 79, 137, 89,
34, 13, 71, 25, 150, 55, 62, 16, 2, 186, 74, 120, 107, 61, 124, 135,
105, 159, 224, 71, 238, 183, 130, 178, 227, 53, 164, 192, 132, 45, 25, 166,
58, 96, 192, 208, 152, 254, 225, 154, 184, 43, 19, 35, 104, 143, 170, 210,
47, 138, 25, 29, 66, 155, 207, 37, 208, 115, 230, 85, 161, 255, 251, 219,
96, 187, 172, 248, 185, 141, 146, 113, 184, 165, 149, 32, 53, 63, 242, 100,
202, 12, 129, 12, 167, 80, 49, 120, 196, 23, 205, 101, 23, 200, 64, 119,
132, 236, 111, 61, 121, 1, 175, 49, 167, 68, 82, 220, 131, 68, 64, 77,
80, 193, 89, 248, 17, 139, 112, 213, 162, 61, 58, 185, 5, 123, 48, 137,
103, 159, 199, 225, 161, 118, 18, 72, 186, 100, 36, 61, 169, 100, 139, 249,
37, 228, 241, 54, 111, 97, 12, 18, 158, 70, 203, 164, 193, 252, 45, 41,
155, 244, 10, 60, 106, 28, 132, 36, 129, 168, 98, 42, 12, 237, 35, 49,
209, 21, 104, 65, 118, 116, 83, 21, 186, 30, 185, 124, 26, 230, 165, 182,
219, 175, 242, 69, 203, 119, 106, 76, 31, 204, 118, 44, 185, 154, 93, 138,
175, 197, 203, 37, 57, 30, 58, 244, 61, 243, 112, 87, 218, 21, 13, 181,
196, 0, 250, 143, 119, 100, 220, 150, 48, 82, 194, 233, 236, 32, 116, 155,
229, 63, 193, 31, 94, 251, 19, 155, 239, 131, 242, 201, 152, 0, 126, 92,
0, 120, 235, 119, 221, 199, 13, 13, 26, 208, 247, 6, 240, 107, 162, 213,
170, 99, 244, 8, 94, 7, 163, 77, 138, 150, 22, 34, 150, 148, 126, 150,
13, 106, 13, 234, 49, 26, 247, 75, 234, 238, 82, 218, 89, 244, 176, 4,
87, 164, 12, 181, 172, 176, 3, 54, 70, 25, 89, 220, 174, 215, 114, 187,
65, 127, 165, 115, 153, 156, 190, 132, 139, 16, 94, 228, 4, 14, 232, 91,
179, 245, 17, 95, 165, 20, 149, 235, 45, 238, 199, 219, 198, 57, 150, 7,
184, 59, 122, 81, 216, 57, 213, 99, 73, 52, 71, 78, 66, 48, 169, 245,
37, 186, 84, 202, 206, 234, 181, 252, 216, 124, 215, 158, 181, 110, 166, 109,
169, 32, 190, 129, 89, 148, 228, 163, 200, 44, 241, 10, 92, 154, 0, 129,
85, 84, 75, 35, 62, 0, 31, 23, 124, 247, 181, 49, 101, 91, 158, 14,
124, 92, 144, 213, 240, 116, 120, 184, 160, 105, 195, 252, 4, 195, 125, 89,
23, 200, 124, 86, 200, 156, 109, 68, 147, 34, 117, 248, 126, 19, 6, 250,
112, 150, 207, 96, 11, 72, 25, 171, 177, 220, 168, 181, 159, 37, 14, 182,
238, 139, 12, 182, 39, 121, 251, 186, 156, 112, 178, 26, 132, 184, 20, 244,
79, 227, 84, 90, 43, 109, 5, 221, 73, 173, 146, 232, 211, 161, 159, 193,
44, 171, 119, 83, 37, 114, 13, 193, 227, 191, 219, 103, 119, 239, 91, 198,
210, 175, 32, 254, 29, 38, 219, 102, 211, 109, 79, 166, 14, 238, 103, 58,
153, 223, 141, 190, 81, 154, 127, 52, 89, 90, 155, 209, 73, 246, 151, 28,
166, 184, 26, 195, 222, 245, 41, 177, 98, 120, 88, 113, 102, 191, 171, 0,
158, 57, 190, 240, 211, 62, 36, 45, 152, 192, 254, 226, 182, 149, 254, 92,
77, 24, 31, 43, 13, 73, 221, 111, 193, 53, 224, 40, 244, 140, 40, 147,
197, 230, 131, 152, 36, 167, 197, 189, 103, 195, 159, 30, 89, 157, 122, 166,
181, 154, 210, 194, 227, 175, 49, 164, 228, 18, 204, 216, 158, 244, 107, 99,
219, 238, 251, 255, 150, 193, 188, 253, 132, 91, 27, 221, 248, 150, 132, 173,
48, 86, 111, 19, 5, 161, 183, 233, 179, 132, 193, 81, 120, 45, 180, 83,
27, 175, 83, 177, 112, 15, 175, 245, 107, 202, 210, 99, 96, 86, 17, 144,
172, 128, 163, 177, 33, 91, 154, 212, 223, 92, 37, 87, 137, 217, 171, 164,
137, 254, 86, 249, 13, 5, 238, 120, 207, 193, 220, 48, 23, 237, 192, 196,
109, 100, 117, 143, 191, 16, 99, 158, 108, 137, 245, 245, 98, 160, 153, 235,
158, 239, 229, 172, 244, 211, 36, 196, 148, 0, 244, 172, 237, 180, 112, 91,
24, 229, 234, 215, 245, 77, 117, 97, 214, 107, 86, 57, 11, 240, 36, 170,
223, 9, 86, 212, 221, 122, 152, 113, 123, 140, 29, 104, 64, 141, 195, 89,
115, 173, 48, 104, 251, 166, 202, 209, 17, 32, 10, 28, 16, 47, 198, 240,
56, 28, 196, 21, 151, 92, 135, 18, 232, 164, 122, 40, 50, 62, 129, 165,
235, 178, 13, 230, 88, 215, 184, 105, 248, 194, 133, 8, 241, 76, 248, 42,
104, 188, 63, 255, 24, 198, 17, 0, 107, 140, 41, 157, 202, 170, 66, 181,
92, 79, 156, 180, 39, 84, 29, 31, 22, 163, 39, 8, 239, 32, 50, 87,
220, 113, 87, 245, 56, 104, 245, 163, 244, 30, 64, 190, 201, 130, 116, 37,
209, 16, 218, 248, 100, 247, 23, 122, 154, 63, 130, 137, 95, 180, 225, 59,
38, 56, 48, 94, 160, 38, 1, 149, 68, 65, 83, 13, 195, 199, 51, 148,
215, 13, 141, 59, 4, 164, 182, 159, 227, 56, 40, 66, 237, 9, 126, 19,
65, 174, 113, 226, 212, 114, 119, 25, 179, 202, 38, 118, 146, 89, 10, 105,
102, 151, 165, 107, 60, 91, 10, 31, 147, 50, 98, 128, 60, 224, 147, 125,
142, 4, 95, 99, 118, 214, 124, 41, 161, 162, 159, 51, 252, 170, 156, 98,
65, 65, 205, 125, 156, 215, 157, 48, 10, 255, 176, 70, 223, 68, 195, 109,
72, 35, 208, 191, 249, 76, 232, 154, 239, 136, 205, 235, 50, 106, 77, 115,
171, 27, 241, 72, 242, 142, 120, 252, 141, 40, 66, 108, 108, 6, 217, 181,
41, 170, 116, 34, 246, 92, 189, 229, 228, 138, 208, 22, 244, 30, 138, 160,
57, 123, 232, 43, 9, 96, 40, 150, 136, 106, 2, 245, 112, 219, 170, 153,
133, 30, 188, 124, 122, 121, 97, 95, 3, 50, 117, 248, 80, 255, 152, 137,
122, 128, 180, 131, 224, 220, 25, 104, 71, 27, 93, 183, 247, 7, 81, 124,
37, 13, 248, 160, 134, 90, 255, 137, 140, 116, 129, 220, 116, 25, 101, 238,
153, 25, 114, 121, 246, 139, 226, 61, 167, 63, 244, 158, 71, 69, 26, 108,
82, 19, 12, 216, 109, 11, 98, 249, 128, 227, 213, 244, 253, 58, 226, 150,
83, 84, 16, 73, 224, 242, 134, 135, 49, 123, 37, 120, 192, 63, 229, 19,
82, 241, 235, 191, 253, 77, 184, 125, 49, 141, 113, 46, 199, 83, 196, 27,
168, 212, 100, 136, 198, 235, 15, 248, 102, 52, 112, 38, 115, 85, 57, 198,
71, 37, 133, 68, 114, 62, 193, 163, 203, 50, 209, 147, 133, 150, 174, 45,
106, 18, 181, 49, 253, 196, 41, 99, 248, 153, 138, 108, 239, 195, 50, 54,
232, 183, 122, 91, 245, 59, 254, 193, 109, 208, 84, 242, 102, 2, 32, 208,
20, 213, 1, 18, 154, 42, 117, 146, 196, 255, 254, 179, 195, 48, 233, 171,
232, 99, 6, 221, 158, 5, 158, 11, 213, 242, 253, 59, 244, 29, 11, 9,
243, 13, 27, 141, 55, 144, 31, 251, 144, 30, 174, 83, 78, 151, 254, 54,
250, 5, 20, 152, 10, 178, 163, 223, 165, 161, 26, 153, 190, 37, 162, 177,
50, 189, 62, 106, 78, 94, 101, 222, 124, 20, 49, 202, 171, 47, 1, 166,
52, 21, 62, 62, 199, 226, 29, 108, 131, 55, 6, 65, 93, 168, 243, 143,
102, 49, 249, 180, 143, 95, 146, 11, 115, 195, 214, 30, 242, 215, 196, 39,
236, 3, 101, 179, 229, 131, 32, 104, 186, 38, 169, 23, 206, 156, 167, 52,
206, 160, 232, 93, 255, 122, 105, 114, 61, 63, 145, 48, 22, 85, 87, 2,
88, 188, 181, 61, 63, 213, 165, 250, 251, 79, 17, 202, 235, 184, 254, 185,
89, 231, 23, 88, 97, 128, 203, 159, 191, 92, 207, 213, 177, 38, 215, 10,
226, 140, 71, 34, 98, 237, 28, 93, 60, 45, 39, 39, 230, 38, 225, 63,
13, 248, 151, 110, 120, 98, 13, 55, 190, 220, 12, 112, 2, 227, 122, 229,
111, 193, 7, 209, 174, 35, 47, 234, 80, 86, 18, 54, 124, 243, 117, 137,
235, 13, 248, 99, 111, 5, 154, 46, 226, 166, 158, 228, 137, 24, 201, 248,
217, 208, 202, 136, 243, 249, 114, 68, 79, 132, 122, 204, 119, 240, 85, 98,
253, 77, 197, 108, 83, 95, 154, 53, 5, 56, 25, 142, 80, 227, 135, 42,
179, 81, 178, 167, 74, 36, 235, 153, 169, 101, 101, 32, 85, 187, 131, 82,
8, 72, 191, 91, 168, 89, 144, 173, 146, 170, 60, 226, 141, 195, 12, 64,
20, 190, 231, 94, 227, 210, 247, 140, 56, 93, 172, 141, 24, 47, 224, 32,
120, 159, 124, 32, 248, 12, 205, 138, 182, 9, 109, 67, 204, 121, 132, 224,
56, 107, 62, 27, 62, 54, 167, 118, 147, 83, 3, 171, 131, 227, 203, 251,
130, 71, 27, 123, 84, 232, 5, 10, 242, 114, 78, 190, 236, 210, 159, 36,
61, 221, 63, 123, 19, 230, 241, 166, 57, 245, 81, 188, 216, 29, 183, 91,
100, 210, 214, 184, 187, 219, 195, 173, 78, 17, 107, 58, 227, 10, 94, 32,
232, 157, 156, 251, 131, 141, 162, 188, 130, 243, 121, 91, 16, 48, 182, 117,
3, 140, 45, 190, 103, 240, 107, 181, 1, 214, 239, 228, 225, 77, 5, 201,
234, 161, 196, 109, 46, 102, 42, 177, 90, 163, 12, 106, 211, 194, 223, 214,
78, 13, 148, 181, 253, 255, 107, 255, 214, 90, 227, 183, 168, 232, 128, 146,
137, 68, 0, 184, 171, 42, 105, 5, 205, 117, 111, 160, 55, 79, 119, 133,
92, 11, 58, 89, 11, 165, 88, 225, 0, 60, 152, 168, 36, 24, 58, 174,
92, 58, 102, 7, 100, 207, 12, 49, 68, 124, 210, 123, 203, 73, 0, 39,
84, 58, 128, 95, 224, 217, 64, 224, 21, 216, 136, 57, 240, 194, 231, 77,
253, 77, 84, 97, 28, 97, 147, 96, 221, 101, 219, 168, 174, 219, 207, 2,
22, 79, 98, 246, 40, 162, 214, 61, 123, 94, 119, 107, 32, 94, 184, 29,
172, 13, 127, 200, 110, 18, 41, 75, 119, 4, 243, 37, 224, 194, 39, 246,
17, 137, 236, 58, 44, 194, 119, 167, 32, 238, 18, 64, 77, 203, 94, 249,
216, 221, 193, 70, 239, 234, 145, 102, 239, 132, 139, 207, 70, 178, 197, 87,
60, 177, 145, 104, 115, 9, 15, 147, 247, 33, 211, 68, 236, 49, 61, 196,
14, 255, 10, 253, 233, 155, 99, 216, 31, 238, 167, 101, 161, 108, 189, 221,
29, 78, 69, 144, 87, 84, 35, 79, 117, 247, 147, 98, 40, 209, 38, 55,
208, 49, 52, 185, 204, 152, 146, 236, 134, 57, 81, 39, 166, 14, 4, 195,
93, 73, 84, 180, 157, 119, 3, 19, 110, 151, 117, 151, 104, 155, 206, 56,
204, 2, 241, 153, 154, 131, 133, 33, 189, 214, 72, 99, 229, 77, 38, 66,
150, 122, 246, 52, 242, 250, 71, 96, 145, 188, 247, 249, 87, 197, 49, 36,
200, 34, 189, 98, 166, 66, 131, 99, 24, 204, 198, 253, 25, 236, 63, 175,
103, 54, 227, 89, 48, 42, 185, 193, 230, 177, 186, 62, 118, 235, 98, 62,
13, 31, 161, 179, 97, 36, 22, 121, 240, 220, 119, 9, 201, 182, 185, 48,
236, 156, 137, 28, 199, 66, 221, 173, 243, 151, 235, 106, 130, 77, 168, 144,
108, 73, 67, 205, 110, 90, 71, 94, 54, 190, 104, 255, 116, 33, 47, 97,
189, 184, 125, 132, 251, 91, 50, 238, 242, 29, 88, 117, 107, 1, 5, 215,
74, 72, 165, 184, 162, 236, 23, 217, 170, 127, 216, 30, 160, 8, 127, 93,
192, 253, 226, 187, 88, 20, 170, 74, 49, 2, 191, 156, 3, 196, 116, 78,
13, 25, 6, 175, 5, 29, 136, 175, 156, 97, 205, 60, 105, 77, 154, 41,
74, 124, 229, 162, 144, 143, 236, 193, 145, 172, 94, 149, 112, 210, 227, 125,
235, 233, 45, 240, 7, 181, 159, 163, 22, 108, 224, 127, 185, 122, 169, 255};

#endif /* WHITE_NOISE_H_ */
</code></pre>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// generate_white_noise.cpp</span>

<span class="cp">#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
</span>
<span class="cp">#define SIZE 4096
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>

  <span class="n">srand</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"#ifndef WHITE_NOISE_H_</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">" #define WHITE_NOISE_H_</span><span class="se">\n\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"#include &lt;avr/pgmspace.h&gt;</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"char white_noise["</span> <span class="o">&lt;&lt;</span> <span class="n">SIZE</span> <span class="o">&lt;&lt;</span> <span class="s">"] PROGMEM = {"</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SIZE</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">16</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">256</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"};</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"#endif </span><span class="se">\\</span><span class="s">* WHITE_NOISE_H_ *</span><span class="se">\\\n</span><span class="s">"</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Synth_8bits.ino :

#include &lt;avr/io.h&gt;

#include "Synth_8bits.h"

void setup()
{
  synth_setup();
}

int tetris_m[] = {
  NOTE_D5, NOTE_D5,
  NOTE_B4, NOTE_C5,
  NOTE_D5, NOTE_D5,
  NOTE_C5, NOTE_B4,

  NOTE_A4, NOTE_A4,
  NOTE_A4, NOTE_C5,
  NOTE_E5, NOTE_E5,
  NOTE_D5, NOTE_C5,

  NOTE_B4, NOTE_B4,
  NOTE_B4, NOTE_C5,
  NOTE_D5, NOTE_D5,
  NOTE_E5, NOTE_E5,

  NOTE_C5, NOTE_C5,
  NOTE_A4, NOTE_A4,
  NOTE_A4, NOTE_A4,
  NOTE_A4, NOTE_A4,

  //--

  NOTE_D5, NOTE_D5,
  NOTE_D5, NOTE_F5,
  NOTE_A5, NOTE_A5,
  NOTE_G5, NOTE_F5,

  NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_C5,
  NOTE_E5, NOTE_E5,
  NOTE_D5, NOTE_C5,

  NOTE_B4, NOTE_B4,
  NOTE_B4, NOTE_C5,
  NOTE_D5, NOTE_D5,
  NOTE_E5, NOTE_E5,

  NOTE_C5, NOTE_C5,
  NOTE_A4, NOTE_A4,
  NOTE_A4, NOTE_A4,
  NOTE_A4, NOTE_A4,

  //--

  NOTE_D5, NOTE_D5,
  NOTE_D5, NOTE_F5,
  NOTE_A5, NOTE_A5,
  NOTE_G5, NOTE_F5,

  NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_C5,
  NOTE_E5, NOTE_E5,
  NOTE_D5, NOTE_C5,

  NOTE_B4, NOTE_B4,
  NOTE_B4, NOTE_C5,
  NOTE_D5, NOTE_D5,
  NOTE_E5, NOTE_E5,

  NOTE_C5, NOTE_C5,
  NOTE_A4, NOTE_A4,
  NOTE_A4, NOTE_A4,
  NOTE_A4, NOTE_A4,

  //--

  NOTE_E5, NOTE_E5,
  NOTE_C5, NOTE_C5,
  NOTE_D5, NOTE_D5,
  NOTE_B4, NOTE_B4,

  NOTE_C5, NOTE_C5,
  NOTE_A4, NOTE_A4,
  NOTE_GS3, NOTE_GS3,
  NOTE_B4, NOTE_B4,

  NOTE_E5, NOTE_E5,
  NOTE_C5, NOTE_C5,
  NOTE_D5, NOTE_D5,
  NOTE_B4, NOTE_B4,

  NOTE_C5, NOTE_E5,
  NOTE_A5, NOTE_GS5,
  NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_E5,

  //-- Last one

  NOTE_E5, NOTE_E5,
  NOTE_C5, NOTE_C5,
  NOTE_D5, NOTE_D5,
  NOTE_B4, NOTE_B4,

  NOTE_C5, NOTE_C5,
  NOTE_A4, NOTE_A4,
  NOTE_GS3, NOTE_GS3,
  NOTE_B4, NOTE_B4,

  NOTE_E5, NOTE_E5,
  NOTE_C5, NOTE_C5,
  NOTE_D5, NOTE_D5,
  NOTE_B4, NOTE_B4,

  NOTE_A5, NOTE_A5,
  NOTE_A5, NOTE_A5,
  NOTE_A5, NOTE_A5,
  NOTE_A5, NOTE_A5,
  0  };

#define FINISH 4242

int tetris_b[] = {
  NOTE_E3, NOTE_E3,
  NOTE_E2, NOTE_E2,
  NOTE_E3, NOTE_E3,
  NOTE_E2, NOTE_E2,

  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,
  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,

  NOTE_GS3, NOTE_GS3,
  NOTE_GS2, NOTE_GS2,
  NOTE_GS3, NOTE_GS3,
  NOTE_GS2, NOTE_GS2,

  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,
  NOTE_A3, NOTE_B3,
  NOTE_C4, NOTE_D4,

  // --

  NOTE_D3, NOTE_D3,
  NOTE_D2, NOTE_D2,
  NOTE_D3, NOTE_D3,
  NOTE_D2, NOTE_D2,

  NOTE_C3, NOTE_C3,
  NOTE_C2, NOTE_C2,
  NOTE_C3, NOTE_C3,
  NOTE_C2, NOTE_C2,

  NOTE_B3, NOTE_B3,
  NOTE_B2, NOTE_B2,
  NOTE_B3, NOTE_B3,
  NOTE_B2, NOTE_B2,

  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,
  NOTE_A3, NOTE_B3,
  NOTE_C4, NOTE_D4,

  // --

  NOTE_D3, NOTE_D3,
  NOTE_D2, NOTE_D2,
  NOTE_D3, NOTE_D3,
  NOTE_D2, NOTE_D2,

  NOTE_C3, NOTE_C3,
  NOTE_C2, NOTE_C2,
  NOTE_C3, NOTE_C3,
  NOTE_C2, NOTE_C2,

  NOTE_B3, NOTE_B3,
  NOTE_B2, NOTE_B2,
  NOTE_B3, NOTE_B3,
  NOTE_B2, NOTE_B2,

  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,
  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,

  //--

  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,
  NOTE_B3, NOTE_B3,
  NOTE_B2, NOTE_B2,

  NOTE_C4, NOTE_C4,
  NOTE_C3, NOTE_C3,
  NOTE_D4, NOTE_D4,
  NOTE_D3, NOTE_D3,

  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,
  NOTE_B3, NOTE_B3,
  NOTE_B2, NOTE_B2,

  NOTE_C4, NOTE_C4,
  NOTE_C3, NOTE_C3,
  NOTE_D4, NOTE_D4,
  NOTE_D3, NOTE_D3,

  // -- and the last line

  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,
  NOTE_B3, NOTE_B3,
  NOTE_B2, NOTE_B2,

  NOTE_C4, NOTE_C4,
  NOTE_C3, NOTE_C3,
  NOTE_D4, NOTE_D4,
  NOTE_D3, NOTE_D3,

  NOTE_A3, NOTE_A3,
  NOTE_A2, NOTE_A2,
  NOTE_B3, NOTE_B3,
  NOTE_B2, NOTE_B2,

  FINISH, FINISH,
  FINISH, FINISH,
  FINISH, FINISH,
  FINISH, FINISH,

  0};

void play_2_voices(int M, int B)
{
    square1_amplitude = 100;
    square1_period = frequency_to_period(M);

    square2_amplitude = 120;
    if (B != FINISH)
    square2_period = frequency_to_period(B);

    if (B == FINISH)
    {
      square2_period = frequency_to_period(NOTE_A3);
      square3_period = frequency_to_period(NOTE_A4);
      square2_amplitude = 120;
      square3_amplitude = 25;
    }

    square3_amplitude = 0;
    square4_amplitude = 0;

    delay(300);
}

void play_2_voices_with_effects(int M, int B)
{
    square1_amplitude = 90;
    square1_period = frequency_to_period(M);

    square2_amplitude = 90;
    if (B != FINISH)
    square2_period = frequency_to_period(B);

    if (B == FINISH)
    {
      square2_period = frequency_to_period(NOTE_A3);
      square3_period = frequency_to_period(NOTE_A4);
      square2_amplitude = 120;
      square3_amplitude = 25;
    }

    square3_amplitude = 0;
    square4_amplitude = 0;

  int cp1 = square1_period;
  int cp2 = square2_period;
  for (int i =0; i &lt; 6; i++)
  {
    square1_amplitude = (5 - i) * 100 / 5;
    square1_period = cp1 / (1 + (i % 2));
    square2_amplitude = 50 + (i) * 50 / 5;
    square2_period = cp2 / (1 + (1 + i % 2));
    delay(50);
  }
}

void cutall()
{
  square1_amplitude = 0;
  square2_amplitude = 0;
  square3_amplitude = 0;
  square4_amplitude = 0;
}

void loop()
{
  //TETRIS SONG!
  for (int i = 0; tetris_m[i] != 0; i++)
  {
    play_2_voices(tetris_m[i], tetris_b[i]);
  }

  //TETRIS SONG (CHIPTUNE VERSION)
  for (int i = 0; tetris_m[i] != 0; i++)
  {
    play_2_voices_with_effects(tetris_m[i], tetris_b[i]);
  }

  cutall();
  while(true);
    play_seawave();
}
</code></pre></div></div>

<p>Le tar.gz : <a href="data/synth_8bits.tar.gz">synth_8bits.tar</a>.</p>

<h2 id="extrait-sonore-du-code-de-démonstration">Extrait sonore du code de démonstration</h2>

<p>Pour vous montrer que je ne plaisante pas quand à la polyphonie, voici deux extraits utilisant 2 canaux. (Bon, le dernier accord en utilise 3, mais on ne s’en rend pas compte.)</p>

<p><a href="data/arduino_tetris.mp3">Première partie</a>
<a href="data/arduino_tetris_effects.mp3">Seconde partie</a></p>

<h2 id="pour-aller-plus-loin">Pour aller plus loin</h2>

<p>N’hésitez pas à supprimer quelques canaux, comme le 4ième canal, si vous ne l’utilisez pas et trouvez que votre application est trop lente (i.e. supprimer le bloc de code suivant).</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">//---------------</span>
  <span class="c1">//-  SQUARE  4  -</span>
  <span class="c1">//---------------</span>
  <span class="n">square_wave</span><span class="p">(</span><span class="s">"square4_amplitude"</span><span class="p">,</span> <span class="s">"square4_period"</span><span class="p">,</span> <span class="s">"square4_id"</span><span class="p">);</span>
  <span class="c1">//---------------</span>
</code></pre></div></div>

<p>Vous pouvez aussi supprimer le canal de bruit et le tableau white_noise.h pour gagner un peu de mémoire. Bref, faite ce que vous voulez de ce code!</p>

<h3 id="quelques-références-">Quelques références :</h3>

<p>Plus sur le PWM :</p>

<ul>
  <li><a href="http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM">http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM</a></li>
  <li><a href="http://zenol.fr/site/2012/05/03/atmega328-arduino-uno-timercounter-pwm-a-625khz/" title="ATMega328 (Arduino uno) : Timer/Counter &amp; PWM à 62,5kHz">L’article sur le PWM :)</a></li>
</ul>

<p>Plus sur Tone :</p>
<ul>
  <li><a href="http://arduino.cc/en/Tutorial/Tone">http://arduino.cc/en/Tutorial/Tone</a></li>
</ul>]]></content><author><name>Jérémy Cochoy</name></author><category term="arduino" /><category term="software" /><category term="music" /><category term="asm" /><category term="c" /><category term="embeded" /><summary type="html"><![CDATA[Une micro-bibliothèque pour jouer une mélodie polyphonique sur arduino en C. Contient le code, la documentation, et la melodie de tétris comme exemple.]]></summary></entry><entry xml:lang="fr"><title type="html">Haskell - Lazy IO</title><link href="/haskell-lazy-io/" rel="alternate" type="text/html" title="Haskell - Lazy IO" /><published>2013-07-16T00:00:00+03:00</published><updated>2013-07-16T00:00:00+03:00</updated><id>/haskell-lazy-io</id><content type="html" xml:base="/haskell-lazy-io/"><![CDATA[<p>Ces derniers jours, j’écrivais un script haskell qui repère les fichiers présent en double, et propose de ne conserver qu’un exemplaire. Très pratique pour faire un peu de rangement, par exemple parmi une centaine de PDF que je ne lirais jamais.</p>

<p>Je vais ici vous parler de la phase de hachage des fichiers pour les trier et déterminer les doublons. Et oui, on ne vas pas comparer le contenu de tous les fichiers entre eux, ça serait en n^2 par rapport au nombre de fichiers. On ne veux pas non plus attendre une journée.</p>

<p>Je parlerais donc de la lecture du contenu des fichiers pour produire leur hash. Le trie des paires (Nom du fichier, hash) et l’affichage étant trivial et sans intérêt.</p>

<h1 id="strict-io-">Strict IO ?</h1>

<p>La première approche est souvent la plus simple. Nous voulons le hash d’un fichier? Et bien il suffit d’utiliser la fonction <code class="language-plaintext highlighter-rouge">hash :: String -&gt; ByteString</code> du package <code class="language-plaintext highlighter-rouge">Crypto.Hash.SHA1</code> (SHA1, MD5, MD4, SHA256 … celons vos gouts). Pour obtenir le contenue du fichier, on peux utiliser <code class="language-plaintext highlighter-rouge">readFile :: FilePath -&gt; IO String</code>.</p>

<p>Cela nous donne :</p>
<pre><code class="language-{.haskell}">getHash :: String -&gt; (String, ByteString)
getHash filename = do
    hashed &lt;- fmap hash $ readFile filename
    return (filename, hashed)
</code></pre>

<p>Il suffit alors d’appliquer <code class="language-plaintext highlighter-rouge">mapM getHash</code> sur une liste de nom de fichier pour obtenir une liste de couple Nomdufichier/Hashdufichier.</p>

<p>Si l’on test, cela fonctionne très bien… jusqu’au moment où vous tombez sur un fichier de plus d’1GO. Là, <code class="language-plaintext highlighter-rouge">readFile</code> veux charger l’intégralité du fichier en mémoire. Et bien-sur, sur ma machine, c’est impossible.</p>

<h1 id="la-paresse-a-la-rescousse">La paresse a la rescousse!</h1>

<p>On vous à toujours dis qu’être paresseux, c’était mal, improductif, et vous mènerais à votre perte? Et bien, ils avaient tort.</p>

<p>On voudrais lire le fichier par morceau, et construire le hash avec ces morceaux (ce que toute bonne fonction de hachage permet).</p>

<p>Pour ce qui est du hachage, on trouve dans <code class="language-plaintext highlighter-rouge">Crypto.Hash.Whatever</code> les trois fonctions :</p>
<pre><code class="language-{.haskell}">init :: Ctx
update :: Ctx -&gt; S.ByteString -&gt; Ctx
finalize :: Ctx -&gt; S.ByteString
</code></pre>

<p>Il nous faut donc un flux de <code class="language-plaintext highlighter-rouge">ByteString</code>. Pour ce faire, on dispose d’une version paresseuse de <code class="language-plaintext highlighter-rouge">ByteString</code>, qui se trouve dans le package <code class="language-plaintext highlighter-rouge">Data.ByteString.Lazy</code>. Histoire de fixer les notations et de ne pas se perdre entre les <code class="language-plaintext highlighter-rouge">ByteString</code> strict et les <code class="language-plaintext highlighter-rouge">ByteString</code> lazy, on parlera respectivement de <code class="language-plaintext highlighter-rouge">S.ByteString</code> et de <code class="language-plaintext highlighter-rouge">L.ByteString</code> (Strict/Lazy).</p>

<p>Cela revient a importer les deux types de la façon suivante :</p>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString</span> <span class="k">as</span> <span class="n">S</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString.Lazy</span> <span class="k">as</span> <span class="n">L</span>
</code></pre></div></div>

<p>Le type L.ByteString est en fait une liste de S.ByteString, et chaque bloc ne sera lu depuis le fichier qu’au moment où il sera utilisé. Le module L nous offre donc gentiment les fonctions</p>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">L</span><span class="o">.</span><span class="n">readFile</span> <span class="o">::</span> <span class="kt">FilePath</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">L</span><span class="o">.</span><span class="kt">ByteString</span>
<span class="kt">L</span><span class="o">.</span><span class="n">foldlChunks</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">S</span><span class="o">.</span><span class="kt">ByteString</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">L</span><span class="o">.</span><span class="kt">ByteString</span> <span class="o">-&gt;</span> <span class="n">a</span>
</code></pre></div></div>

<p>La première nous donne le contenue de notre fichier. La seconde, nous offre exactement la méthode qui “prend une fonction ajoutant un morceau de fichier au hash”, puis “un hash vide”, et enfin “une ByteString paresseuse”. Cela parais plus évident si l’on spécialise les “a” en “Ctx”.</p>

<p>On peux donc utiliser :</p>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hashed</span> <span class="o">&lt;-</span> <span class="n">fmap</span> <span class="p">(</span><span class="n">finalize</span> <span class="o">.</span> <span class="n">foldlChunks</span> <span class="n">update</span> <span class="n">init</span><span class="p">)</span> <span class="o">$</span> <span class="n">readFile</span> <span class="n">filename</span>
</code></pre></div></div>

<p>Bon, en fait, il y avais plus simple. Il y a aussi la fonction :</p>
<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hashlazy</span> <span class="o">::</span> <span class="kt">L</span><span class="o">.</span><span class="kt">ByteString</span> <span class="o">-&gt;</span> <span class="kt">S</span><span class="o">.</span><span class="kt">ByteString</span>
</code></pre></div></div>
<p>qui produit le même résultat que notre pli.</p>

<p>Et là tout fonctionne bien, nos fichier d’1Go sont haché.</p>

<p>Mais … si vous travaillez sur beaucoup de fichiers, vous risquez d’avoir un soucis. Par exemple, si vous testez sur <code class="language-plaintext highlighter-rouge">/usr/lib</code>, vous obtiendrez peut-être une jolie exception vous indiquant qu’il y a trop de filedescriptors utilisés, et que donc le fichier ne peux être ouvert.
Il se trouve que les fichier ne sont pas fermé immédiatement après le hachage, et c’est un vrai problème. Problème que nous allons résoudre.</p>

<h1 id="la-solution--withfile">La solution : withFile</h1>

<p>La fonction <code class="language-plaintext highlighter-rouge">withFile :: FilePath -&gt; IOMode -&gt; (Handle -&gt; IO r) -&gt; IO r</code> est la clef. Cette fonction prend un nom de fichier, le mode d’ouverture (on utilisera ReadMode), une fonction qui travaille sur le fichier, et nous fait suivre le résultat de l’application de cette fonction. Un peu stupide, me direz vous? Et bien, ça le serait, si cette fonction se contenter de ça. En fait, elle vous assure aussi qu’une fois évaluée, le fichier est fermé. En l’utilisant, on est donc certain que le fichier est immédiatement fermé lorsque withFile est évalué en un “IO r”.</p>

<pre><code class="language-`haskell">getHash filename = do
    hashed &lt;- withFile filename ReadMode $ \h -&gt; do
        fmap hashLazy $ L.hGetContents h
return (filename, hashed)
</code></pre>

<p>Le <code class="language-plaintext highlighter-rouge">unefonction $ \h -&gt; do</code> est une pratique courante pour ces fonctions qui évalue un morceau de code dans un certains contexte. C’est très pratique, et on reconnaît très vite cette idiome avec un peu d’entraînement.</p>

<p>On compile pour vérifier le typage, tout vas bien, et l’on lance donc notre application que l’on s’attend a voir fonctionner. Et là, c’est le drame : “Illegal operation : handle is closed”.</p>

<p>Wohw, quel est ce mystérieux message? Et bien, comme je vous l’ai dit, withFile ferme immédiatement le fichier après l’évaluation de son expression. Et que fait son évaluation? Elle retourne le hash du fichier me dite vous? Faut.</p>

<p>La fonction construit un thunk (je parlerais de promesse de calcul, ou plus simplement de promesse) a l’aide de “fmap …”. L’évaluation de withFile retourne alors cette promesse, plutôt que la valeur du hash. Et cette promesse, elle, ne sera évaluée que plus tard, au moment ou vous en aurez vraiment besoin, et seulement si vous en avez besoin.</p>

<p>Il nous faut donc forcer haskell a être strict, et évaluer le hash avant de sortir de la fonction. Il y a différentes façons de le faire. La plus simple, c’est d’utiliser l’opérateur <code class="language-plaintext highlighter-rouge">`seq`</code> qui force l’évaluation de l’expression a sa gauche, puis retourne l’expression a sa droite. On a aussi l’opérateur <code class="language-plaintext highlighter-rouge">a ($!) b = b `seq` (a b)</code> qui est une “application stricte”. C’est a dire que ce qui sera a droite de <code class="language-plaintext highlighter-rouge">$!</code> sera évalué.</p>

<p>Nb : Il faut faire attention. Quand je dis évalué, je parle bien de <em>dé-construire</em> le premier niveau de l’expression. C’est a dire que si <code class="language-plaintext highlighter-rouge">compute 1 42</code> est un calcul, ceci sera remplacer par la promesse ou le résultat retournée par compute. Si compute produit une promesse plutôt qu’un résultat, l’opérateur <code class="language-plaintext highlighter-rouge">`seq`</code> n’évaluera pas la promesse. Il existe un opérateur <code class="language-plaintext highlighter-rouge">`deepSeq`</code>, qui lui vas <em>tout réduire</em> en profondeur. Comme vous vous en doutez, c’est très coûteux et évalue des choses dont on n’auras peut-être pas besoin. Le plus souvent, on peux se contenter de <code class="language-plaintext highlighter-rouge">`seq`</code> appliqué au bonne endroit pour obtenir le résultat souhaité.</p>

<p>Dans notre cas, il faudrait forcer la promesse faire par <code class="language-plaintext highlighter-rouge">fmap</code> a être évaluée, puis la promesse faite par <code class="language-plaintext highlighter-rouge">hashlazy</code>. Vous allez voir que la solution n’est pas plus compliquée que ce que nous avions déjà écrit :</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- getHash ...</span>
    <span class="n">withFile</span> <span class="n">filename</span> <span class="kt">ReadMode</span> <span class="o">$</span> <span class="nf">\</span><span class="n">h</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="c1">-- On obtient la promesse faite par hashlazy</span>
        <span class="kr">data</span> <span class="o">&lt;-</span> <span class="n">fmap</span> <span class="n">hashlazy</span> <span class="o">$</span> <span class="n">hGetContents</span> <span class="n">h</span>
        <span class="c1">-- On force l'évaluation de hashlazy, qui donc sera forcé d'ouvrir le fichier et de le lire, puisque la valeur retournée est un S.ByteString, une valeur Stricte.</span>
        <span class="n">return</span> <span class="o">$!</span> <span class="kr">data</span>
</code></pre></div></div>

<p>Voila, c’est tout, c’est <code class="language-plaintext highlighter-rouge">$!</code> qui fait tout le travail en demandant à hashlazy de gentiment s’évaluer.</p>

<p>Et la c’est le bonheur, tout refonctionne et l’on peux gérer des fichiers arbitrairement grand en nombre arbitrairement grand, le tout en 4 lignes.</p>]]></content><author><name>Jérémy Cochoy</name></author><category term="programming" /><category term="haskell" /><category term="language" /><category term="lazy" /><category term="io" /><category term="software" /><category term="script" /><summary type="html"><![CDATA[On discute des entrées et sorties paresseuses en Haskell et des soucis qu'un comportement paresseux peut poser.]]></summary></entry><entry xml:lang="fr"><title type="html">C++ - Un gout de programmation fonctionelle</title><link href="/c++-functional-programming-taste/" rel="alternate" type="text/html" title="C++ - Un gout de programmation fonctionelle" /><published>2013-07-12T00:00:00+03:00</published><updated>2013-07-12T00:00:00+03:00</updated><id>/c++-functional-programming-taste</id><content type="html" xml:base="/c++-functional-programming-taste/"><![CDATA[<p>Dans ce billet, nous allons aborder quelques unes des nouvelles fonctionnalités offerte par le C++11. Elles sont clairement inspiré de la vie dans le monde fonctionnel.</p>

<h2 id="alpha-beta--kappa-lambda">Alpha, Beta, … Kappa, Lambda!</h2>

<p>Bien que portant le même nom, les <em>lambda</em>(C++ 11 powered) sont très différentes de leur homologues fonctionnelles, les <em>lambda fonctions</em>. Une lambda en C++11, c’est plutôt une intégration au langage des foncteurs.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AFunctor</span>
<span class="p">{</span>
<span class="nl">public:</span>
  <span class="kt">int</span> <span class="k">operator</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span> <span class="p">}</span>
  <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// ...</span>
<span class="n">AFunctor</span> <span class="n">f</span><span class="p">;</span>
<span class="n">f</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span> <span class="c1">//Display 84</span>
</code></pre></div></div>

<p>Ré-écrivons la même chose avec la syntaxe d’une lambda, que l’on détaillera un peu plus loin (auto permet de laisser le compilateur inférer(deviner) le type).</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">b</span><span class="p">](</span><span class="kt">int</span> <span class="n">a</span><span class="p">){</span><span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">};</span>
</code></pre></div></div>

<p>Les lambda permette de faire la même chose de façon plus légère, et ajoute la sémantique de fonction (i.e. on ne peux pas confondre une lambda et un objet en lisant du code, alors qu’on ‘'’pourrait’’’ avec un foncteur et un objet). Les lambda sont aussi plus proche de d’une fonction anonyme, puisque certaines fonctions (constructeur, opérateur =), implicitement déclaré dans l’exemple ci dessus (on peux faire f = g avec f et g deux AFunctor) n’existent pas (sont explicitement supprimé) pour les lambda.</p>

<p>Par exemple, le constructeur du type d’une lambda (on rappelle qu’en c++11, on peux obtenir le type de <code class="language-plaintext highlighter-rouge">f</code> avec <code class="language-plaintext highlighter-rouge">decltype(f)</code>. Par exemple <code class="language-plaintext highlighter-rouge">decltype(3.5f)</code> ou <code class="language-plaintext highlighter-rouge">std::vector v; decltype(v)</code>) n’existe pas.</p>

<p>Si f est une lambda, le code <code class="language-plaintext highlighter-rouge">decltype(f) g;</code> ne compilera pas. Pourtant, si <code class="language-plaintext highlighter-rouge">f</code> est un <code class="language-plaintext highlighter-rouge">AFunctor</code>, le code <code class="language-plaintext highlighter-rouge">decltype(f) g;</code> compilera et correspond à <code class="language-plaintext highlighter-rouge">AFunctor g;</code>.</p>

<p>Bon, qu’on se rassure, on peux quand même faire une copie d’une lambda :</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[](){</span><span class="k">return</span> <span class="mi">42</span><span class="p">};</span>

<span class="k">auto</span>        <span class="n">g1</span> <span class="o">=</span> <span class="n">f</span><span class="p">;</span>
<span class="c1">//Or</span>
<span class="k">auto</span>        <span class="nf">g2</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
<span class="c1">//Or</span>
<span class="k">decltype</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="n">g3</span> <span class="o">=</span> <span class="n">f</span><span class="p">;</span>
<span class="c1">//Or</span>
<span class="k">decltype</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="n">g4</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="comment-fonctionne-une-lambda">Comment fonctionne une lambda?</h2>

<p>En fait, c’est très simple, est tout est décrit sur la page “Lambda” du site “CPPReference”.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="n">capture</span> <span class="p">]</span> <span class="p">(</span> <span class="n">params</span> <span class="p">)</span> <span class="k">mutable</span> <span class="n">exception</span> <span class="n">attribute</span> <span class="o">-&gt;</span> <span class="n">ret</span> <span class="p">{</span> <span class="n">body</span> <span class="p">}</span>
</code></pre></div></div>

<p>Dans capture on trouve la façon dont les variables extérieurs à la lambda sont capturé. Il y a deux mode de capture : par valeur, et par référence. Par défaut, [] signifie [=] qui veux dire “tout est récupérer par valeur”, et le comportement est identique à une copie des variable(pour les objets comme <code class="language-plaintext highlighter-rouge">std::string</code>, c’est plutôt un <code class="language-plaintext highlighter-rouge">const std::string&amp;</code> que vous recevez). On peux aussi spécifier [&amp;] et toute les variables sont récupérées par référence (et peuvent donc être modifiées depuis la lambda). Enfin, pour ceux qui apprécient la finesse, on peux expliciter le comportement pour chacune des variables, par exemple :</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">msg</span> <span class="o">=</span> <span class="s">"Hello"</span><span class="p">;</span>
<span class="c1">//Take a by value</span>
<span class="k">auto</span> <span class="n">f1</span> <span class="o">=</span> <span class="p">[](){</span><span class="k">return</span> <span class="n">a</span><span class="p">;}</span>
<span class="c1">//Same, but tell explicitely the return type</span>
<span class="k">auto</span> <span class="n">f2</span> <span class="o">=</span> <span class="p">[]()</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="p">{</span><span class="k">return</span> <span class="n">a</span><span class="p">;}</span>
<span class="c1">//Always the same</span>
<span class="k">auto</span> <span class="n">f3</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">](){</span><span class="k">return</span> <span class="n">a</span><span class="p">;}</span>

<span class="c1">//Take v by ref and a by value (return type is void)</span>
<span class="k">auto</span> <span class="n">f4</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">]()</span> <span class="p">{</span><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);}</span>

<span class="c1">//Take everybody by ref</span>
<span class="k">auto</span> <span class="n">f5</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">]()</span> <span class="p">{</span><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="n">a</span><span class="o">++</span><span class="p">;</span> <span class="n">msg</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">'!'</span><span class="p">);</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">msg</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</code></pre></div></div>

<p>La partie “exception” correspond aux spécifications du genre <code class="language-plaintext highlighter-rouge">throw (std::bad_alloc, MyExceptionType)</code> ou encore <code class="language-plaintext highlighter-rouge">noexcept</code> (no throw exception safety).</p>

<p>Si vous voulez modifier un objet obtenu par valeur, il vous faudra rajouter “mutable”. Cela peux être très utile, si vous voulez appeler des méthodes non const sur une copie d’un objet dans le scope.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
<span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="n">v</span><span class="p">]()</span> <span class="k">mutable</span> <span class="p">{</span><span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}</span>
</code></pre></div></div>

<p>Petite astuce parfois utile : Si une lambda ne capture aucune variable, alors elle peux être convertie en pointeur de fonction.</p>

<h2 id="stdfunction-">std::function :</h2>

<p>Les std::function représente des fonctions. Ils sont basé sur les templates variadique (l’un des ajout les plus puissant au langage), que l’on peux espérer disponible sous VisualStudio d’ici 2039 (si l’équipe de microsoft ne prend pas de retard). Le constructeur des std::function autorise de les construire avec plus ou moins n’importe quoi (pointeur de fonction, pointeur de fonction membre, lambda, foncteur, …).</p>

<p>En code :</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Lambda</span>
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span><span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;}</span>

<span class="c1">//Function</span>
<span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">print</span><span class="p">;</span>

<span class="c1">//Functor</span>
<span class="k">struct</span> <span class="nc">Functor</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
    <span class="kt">int</span> <span class="k">operator</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;};</span>
<span class="p">};</span>

<span class="n">Functor</span> <span class="n">func</span><span class="p">;</span>
<span class="n">func</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>    
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">func</span><span class="p">;</span>

<span class="c1">//Member function</span>
<span class="k">struct</span> <span class="nc">St</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">b</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">};</span>
<span class="p">}</span>
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="k">const</span> <span class="n">St</span><span class="o">&amp;</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">St</span><span class="o">::</span><span class="n">sum</span><span class="p">;</span>

</code></pre></div></div>

<h2 id="application-partielle">Application partielle.</h2>

<p>Tout ça, pour en venir à vous parler de <code class="language-plaintext highlighter-rouge">std::bind</code>. Quand on travail avec des langages fonctionnels, on peux appeler une fonction avec seulement une partie de ses arguments. On parle d’<em>application partielle</em>. <code class="language-plaintext highlighter-rouge">std::bind</code> permet de reproduire ce comportement. Prenons une innocente fonction :</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"a : "</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s">" - b :"</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="s">" - c : "</span> <span class="o">&lt;&lt;</span> <span class="n">c</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>On peux alors construire, grâce à std::bind, différentes spécialisation de cette fonction :</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//On fixe les trois arguments</span>
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">()</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
<span class="n">f</span><span class="p">();</span> <span class="c1">// Affiche a : 5 - b : 6 - c : 7</span>
<span class="c1">//On fixe les trois, et on en rajoute un qui sera ignoré</span>
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
<span class="n">f</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span> <span class="c1">// Affiche a : 5 - b : 6 - c : 7</span>

<span class="c1">//Placeholders::_i désigne le i-ième argument lors de l’appelle de f</span>
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">);</span>
<span class="n">f</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span> <span class="c1">//  Affiche a : 5 - b : 6 - c : 42</span>

<span class="c1">//Ne fixe que le premier argument</span>
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_2</span><span class="p">);</span>
<span class="n">f</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span> <span class="c1">//  Affiche a : 5 - b : 10 - c : 20</span>

<span class="c1">//On peux changer l'ordre :</span>
<span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">display</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_2</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">);</span>
<span class="n">f</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span> <span class="c1">//  Affiche a : 5 - b : 20 - c : 10</span>

</code></pre></div></div>

<p>Bien entendu, on peux aussi faire des choses plus complexe (passage des arguments par référence avec <code class="language-plaintext highlighter-rouge">std::ref</code> et <code class="language-plaintext highlighter-rouge">std::cref</code> dans les arguments de bind, pointeurs de fonction membre, pointeur vers membres, etc.).</p>

<p>Si vous vous demandez à quoi ça peux bien servir, et bien dite vous que là où on attend une callback avec une certaine signature (c’est le cas avec beaucoup d’outil de <code class="language-plaintext highlighter-rouge">&lt;algorithm&gt;</code>) vous avez maintenant la possibilité de spécialiser vos fonctions.</p>

<p>Pour ce qui est du coût, il est faible (celons les cas beaucoup de choses peuvent être optimisé lors de la compilation), et n’est un argument recevable que dans certains cas particulier. Donc, à moins de faire du temps réel et de faire ce genre de manipulation dans les parties critique, vous pouvez vous lâcher.</p>

<p>Voilà, j’espère vous avoir donné un petit aperçu de l’apport du c++11 en matière de manipulation des fonctions.</p>

<h2 id="références-">Références :</h2>

<ul>
  <li><a href="http://en.cppreference.com/w/cpp/language/lambda">http://en.cppreference.com/w/cpp/language/lambda</a></li>
  <li><a href="http://en.cppreference.com/w/cpp/utility/functional/function">http://en.cppreference.com/w/cpp/utility/functional/function</a></li>
</ul>]]></content><author><name>Jérémy Cochoy</name></author><category term="c++" /><category term="programming" /><category term="functional" /><category term="language" /><summary type="html"><![CDATA[Une introduction aux nouveux aspect fonctionnel du C++ 11. Il y est question de lambdas, et les applications partielles.]]></summary></entry><entry xml:lang="fr"><title type="html">CMake - Mini howto</title><link href="/cmake-howto/" rel="alternate" type="text/html" title="CMake - Mini howto" /><published>2013-06-30T00:00:00+03:00</published><updated>2013-06-30T00:00:00+03:00</updated><id>/cmake-howto</id><content type="html" xml:base="/cmake-howto/"><![CDATA[<h2 id="quest-ce-que-cmake-">Qu’est-ce que CMake ?</h2>

<p>CMake est un utilitaire permettant de générer le “build process” d’un projet. C’est un outils du même genre que les autotools (aussi appelé pour des raisons que je tairai ‘autohell’) en</p>

<ul>
  <li>Plus simple à configurer</li>
  <li>Plus récent (donc moins de façons de procédé obscures)</li>
  <li>Plus performant (dans le sens où, avec cmake, compiler un projet à l’extérieur du repository est extrêmement simple et agréable!)</li>
  <li>Vous êtes libre d’organiser vos répertoires/fichier comme vous le désirez.</li>
</ul>

<p>Il est bon aussi de savoir que CMake est capable de générer aussi bien des Makefiles que des fichiers de projet VC++ ou XCode (pas mal, hein?).</p>

<p>On a aussi une jolie progression en % de la compilation (et l’on peut toujours utiliser make -j42 pour faire chauffer les cœurs).</p>

<p>##Comment on s’en sert ?</p>

<p>On connais tous le <em>./autogen.sh</em>, <em>./configure</em> puis <em>make &amp;&amp; sudo make install</em>. Bien entendu, on produit tous les fichiers bien salle dans le dossier des sources, ce qui donne une magnifique liste de fichiers à ajouter au .gitignore du votre projet (ou tout autre fichier équivalent pour svn / mercurial). Avec cmake, on peut reproduire le schéma des autotools via <code class="language-plaintext highlighter-rouge">cmake .</code> puis <code class="language-plaintext highlighter-rouge">make &amp;&amp; sudo make install</code>. Mais mieux, vous pouvez (par exemple) faire <code class="language-plaintext highlighter-rouge">mkdir build &amp;&amp; cd build</code> puis <code class="language-plaintext highlighter-rouge">cmake ..</code> et <code class="language-plaintext highlighter-rouge">make &amp;&amp; sudo make install</code>. Dite bonjour a la propreté de votre projet grâce à CMake ;)</p>

<p>##Comment ça fonctionne ?</p>

<p>C’est là qu’est le plus beau. Configurer CMake pour un projet, gérer les dépendances de libs, générer les libs, voir même générer les packages (que ce soit des packages archlinux, debian …). On prend très vite en main, c’est claire, et la documentation est excellente.</p>

<p>Je ne vais pas détailler comment construire un fichier de config ; le <a href="http://www.cmake.org/cmake/help/cmake_tutorial.html">tutorial CMake</a> le fait déjà très bien, et l’on trouve tout ce qu’il manque dans le wiki. (Notez que dans un VRAI projet, il vous faudra un peu plus que le tutorial). Je vais aborder les idées générales et les petites astuces qui m’ont servies.</p>

<p>D’abord, on place les instructions dans un fichier CMakeLists.txt a la racine du projet. On évite donc la multiplication des fichiers de configuration. Il est possible d’appeler des scripts d’autres dossier grâce à <code class="language-plaintext highlighter-rouge">add_subdirectory("${PROJECT_SOURCE_DIR}/your_folder"</code>). Il est important d’utiliser <code class="language-plaintext highlighter-rouge">${PROJECT_SOURCE_DIR}</code> pour que tout se place bien quand on souhaite compiler dans un autre dossier.</p>

<p>On peut facilement demander a cmake de trouver des libs. En règle générale, on trouve un FindNomDeLaLib.cmake que l’on placera dans projet/cmake/Modules/, et l’on prendras soin d’ajouter <code class="language-plaintext highlighter-rouge">set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")</code>.</p>

<p>Une façon pratique pour compiler votre projet est de placer tous vos .c/.cpp dans un dossier src, et de tous les sélectionner (ça évite d’oublier d’ajouter un .cpp a la liste des fichiers du projet). Avec <code class="language-plaintext highlighter-rouge">file(GLOB_RECURSE SOURCE_FILES src/*.cpp SRC)</code> le liste des fichiers figure dans la variable “SOURCE_FILES”. Si il vous faut exclure certains fichiers, vous pouvez utiliser :
<code class="language-plaintext highlighter-rouge">file(GLOB_RECURSE UNWANTED_FILES src/FichierAExclure.cpp SRC)
list (REMOVE_ITEM SOURCE_FILES ${UNWANTED_FILES})</code></p>

<p>Si vous êtes fan des tests unitaires, CMake propose une façon agréable de lancer des tests avec :
<code class="language-plaintext highlighter-rouge">add_test (NAME NomDuTeste WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/repertoiredexecution" COMMAND "commande a executer")</code>
Ça vas de “lancer un programme et vérifier qu’il EXIT_SUCCESS” à “vérifier que la sortie du programme contient cette expression”.</p>

<p>Chose utile, que ne fournissent pas les autotools, c’est une façon unifiée de gèrer le numéro de version de l’application ; Toute les variables d’un CMakeListes peuvent être utiliser pour générer des fichiers à partir de templates (souvent le nom du fichier avec le suffixe .in). En pratique, on définit VERSION_MAJOR et VERSION_MINOR, puis on génère un Version.h, un doxyfile, et on utilise les valeurs pour générer les noms des bibliothèques exportés. C’est simple, intuitif, et très bien expliqué dans le tutoriel. Faire une release se limite alors a changer le numéro de version dans un fichier, et de lancer la compilation pour obtenir les binaires et packages.</p>

<p>CMake dispose aussi d’un système de macros, pour faciliter la vie des maintainers, et l’on comprend donc que de plus en plus de projets tendent à l’utiliser.</p>

<p>Un fichier de configuration emacs est disponible (depuis la doc de cmake) pour ajouter un “cmake-mode”, et se charge avec, par exemple, <code class="language-plaintext highlighter-rouge">(load "~/.emacs.d/cmake-mode.el")</code>.</p>

<p>On peux aussi contrôler la génération d’une documentation avec doxygen. Pour cela, on rajoute un CMakeListes dans un répertoire /doc. On demande à ce que doxygen soit présent via <code class="language-plaintext highlighter-rouge">find_package(Doxygen)</code>. On écrit un fichier template doxygen.in de configuration, où les valeurs à modifier sont de la forme @NOM_DUN_DEFINE@, et définies dans le fichier de fonfiguration CMake par <code class="language-plaintext highlighter-rouge">set(NOM_DUN_DEFINE pouïc)</code>. Ensuite, on peut facilement ajouter une règle “make doc” de la façon suivante :</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if(DOXYGEN_FOUND)
  configure_file(${DOXYGEN_TEMPLATE_FILE}
    ${DOXYGEN_CONFIGURED_FILE}
    @ONLY
    )
  add_custom_target(doc
    ${DOXYGEN_EXECUTABLE}
    ${DOXYGEN_CONFIGURED_FILE}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
endif(DOXYGEN_FOUND)
</code></pre></div></div>
<p>où le @ONLY signifie que seul les mots entouré d’@ seront remplacé (Sinon, les ${SOMETHING} sont aussi affectés).</p>

<h2 id="conclusion-">Conclusion :</h2>

<p>Ce qu’il faut retenir, c’est que CMake est simple à configurer, offre de nombreuses fonctionnalités, et laisse la possibilité d’ajouter celles manquantes. Beaucoup de gens sont encore habitué au ./configure, et sont effrayé par cette nouvelle façon d’aborder ce problème. Pourtant, CMake est un réel gain de temps, et l’on voit des gros projets comme KDE changer de build system pour CMake.  On peux même l’utiliser pour de minuscule projets (compiler les .cpp d’un dossier en un exécutable, sans dépendances particulières, se fait avec un fichier de configuration de 3 lignes), et je vous encourage justement à le faire. Trois lignes pour avoir une gestion automatique des dépendances des .h, génération des makefiles, le tout multiplateforme, ce n’est pas cher payé.</p>

<h3 id="resources-">Resources :</h3>
<ul>
  <li><a href="http://en.wikipedia.org/wiki/CMake">http://en.wikipedia.org/wiki/CMake</a></li>
  <li><a href="http://www.cmake.org/cmake/help/cmake_tutorial.html">http://www.cmake.org/cmake/help/cmake_tutorial.html</a></li>
</ul>]]></content><author><name>Jérémy Cochoy</name></author><category term="language" /><category term="cmake" /><category term="adminsys" /><category term="makefile" /><summary type="html"><![CDATA[Introduction à CMake.]]></summary></entry></feed>